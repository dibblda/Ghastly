/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */





import OpenGLEngine.MoleculeDisplay;
import FileReading.GaussFile;
import GhostAtom.*;
import java.io.File;
import java.util.Observer;
import java.util.Observable;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author David Joshua Dibble
 */
public class GhastlyGUI extends javax.swing.JFrame implements Observer{
     // classes and data for communicating between components
    MoleculeDisplay molecule = null;

    GaussFile moleculeData = null;

    boolean moleculeDataLoaded = false;

    GhostAtomSet Ghastly = new GhostAtomSet();        
    
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Gaussian Input File", "com");
    
    int tempclickcounter = 0;
    int TempIndex;
    
   // boolean NICS0 = false, NICS1 = false, NICSscan = false, NICSplane = false;
            
    /**
     * Creates new form Ghastly
     */
    public GhastlyGUI(MoleculeDisplay moleculePassed, GhostAtomSet GhastlyPassed) {
        molecule = moleculePassed;
        Ghastly = GhastlyPassed;
        initComponents();
    }
    
   
    
   
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        GhostAtomForm = new javax.swing.JFrame();
        AddNewGhostAtomType = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        GhostAtomTable = new javax.swing.JTable();
        // all this gobledygook just to center integers and strings in the table, needs to be somewhere else probably
        DefaultTableCellRenderer Renderer = new DefaultTableCellRenderer();
        Renderer.setHorizontalAlignment(JLabel.CENTER);
        GhostAtomTable.setDefaultRenderer(String.class, Renderer);
        GhostAtomTable.setDefaultRenderer(Integer.class, Renderer);
        // done with the added code
        ComboBoxGhostType = new javax.swing.JComboBox<>();
        FileOpen = new javax.swing.JFileChooser();
        NICSO_dialog = new javax.swing.JFrame();
        NICS0_dialog_cancelButton = new javax.swing.JButton();
        NICS0_dialog_calculateButton = new javax.swing.JButton();
        NICS0_dialog_textField = new javax.swing.JTextField();
        NICS0_dialog_saveReturnButton = new javax.swing.JButton();
        NICS0_dialog_clearButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        NICS0_dialog_saveButton = new javax.swing.JButton();
        NICS1_dialog = new javax.swing.JFrame();
        NICS1_dialog_cancelButton = new javax.swing.JButton();
        NICS1_dialog_calculateButton = new javax.swing.JButton();
        NICS1_dialog_textField = new javax.swing.JTextField();
        NICS1_dialog_saveReturnButton = new javax.swing.JButton();
        NICS1_dialog_clearButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        NICS1_dialog_saveButton = new javax.swing.JButton();
        NICS1_dialog_ChoosePlane = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCompletedCalculation = new javax.swing.JTextArea();
        MainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        CloseMenu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        ExitMenu = new javax.swing.JMenuItem();
        GhostAtomMenu = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        GhostAtomForm.setMinimumSize(new java.awt.Dimension(560, 500));
        GhostAtomForm.setResizable(false);

        AddNewGhostAtomType.setText("Add Group");
        AddNewGhostAtomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewGhostAtomTypeActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Group(s)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Main Menu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        GhostAtomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Ghost Type", "Number of Atoms", "Highlight", "Delete?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GhostAtomTable.setRowSelectionAllowed(false);
        GhostAtomTable.getTableHeader().setReorderingAllowed(false);
        GhostAtomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GhostAtomTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GhostAtomTableMouseReleased(evt);
            }
        });
        GhostAtomTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                GhostAtomTablePropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(GhostAtomTable);
        if (GhostAtomTable.getColumnModel().getColumnCount() > 0) {
            GhostAtomTable.getColumnModel().getColumn(0).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(1).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(2).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(3).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(4).setResizable(false);
        }
        // added this because an extra data column unimportant to the user but needed  // by the gui is added. this removes it from view during runtime, I think,  // but not from being accessible//  
        //TableColumnModel tempTable = GhostAtomTable.getColumnModel();  
        GhostAtomTable.removeColumn(GhostAtomTable.getColumn("Index"));

        ComboBoxGhostType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NICS(0)", "NICS(1)", "NICS-scan", "NICS-grid" }));
        ComboBoxGhostType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxGhostTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GhostAtomFormLayout = new javax.swing.GroupLayout(GhostAtomForm.getContentPane());
        GhostAtomForm.getContentPane().setLayout(GhostAtomFormLayout);
        GhostAtomFormLayout.setHorizontalGroup(
            GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GhostAtomFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addGroup(GhostAtomFormLayout.createSequentialGroup()
                        .addComponent(ComboBoxGhostType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddNewGhostAtomType, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        GhostAtomFormLayout.setVerticalGroup(
            GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GhostAtomFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(AddNewGhostAtomType)
                    .addComponent(ComboBoxGhostType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        NICSO_dialog.setTitle("NICS(0) ");
        NICSO_dialog.setAlwaysOnTop(true);
        NICSO_dialog.setMinimumSize(new java.awt.Dimension(400, 200));
        NICSO_dialog.setPreferredSize(new java.awt.Dimension(400, 200));
        NICSO_dialog.setSize(new java.awt.Dimension(400, 200));
        NICSO_dialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        NICS0_dialog_cancelButton.setText("Quit");
        NICS0_dialog_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        NICSO_dialog.getContentPane().add(NICS0_dialog_cancelButton, gridBagConstraints);

        NICS0_dialog_calculateButton.setText("Calculate");
        NICS0_dialog_calculateButton.setEnabled(false);
        NICS0_dialog_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_calculateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 5;
        NICSO_dialog.getContentPane().add(NICS0_dialog_calculateButton, gridBagConstraints);

        NICS0_dialog_textField.setEditable(false);
        NICS0_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS0_dialog_textField.setText("Define Atom Plane");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        NICSO_dialog.getContentPane().add(NICS0_dialog_textField, gridBagConstraints);

        NICS0_dialog_saveReturnButton.setText("Save and Return");
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        NICSO_dialog.getContentPane().add(NICS0_dialog_saveReturnButton, gridBagConstraints);

        NICS0_dialog_clearButton.setText("Clear");
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 5;
        NICSO_dialog.getContentPane().add(NICS0_dialog_clearButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        NICSO_dialog.getContentPane().add(jSeparator1, gridBagConstraints);

        NICS0_dialog_saveButton.setText("Save");
        NICS0_dialog_saveButton.setEnabled(false);
        NICS0_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(9, 5, 9, 5);
        NICSO_dialog.getContentPane().add(NICS0_dialog_saveButton, gridBagConstraints);

        NICS1_dialog.setTitle("NICS(0) ");
        NICS1_dialog.setAlwaysOnTop(true);
        NICS1_dialog.setMinimumSize(new java.awt.Dimension(400, 200));
        NICS1_dialog.setSize(new java.awt.Dimension(400, 200));
        NICS1_dialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        NICS1_dialog_cancelButton.setText("Quit");
        NICS1_dialog_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        NICS1_dialog.getContentPane().add(NICS1_dialog_cancelButton, gridBagConstraints);

        NICS1_dialog_calculateButton.setText("Calculate");
        NICS1_dialog_calculateButton.setEnabled(false);
        NICS1_dialog_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_calculateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 5;
        NICS1_dialog.getContentPane().add(NICS1_dialog_calculateButton, gridBagConstraints);

        NICS1_dialog_textField.setEditable(false);
        NICS1_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS1_dialog_textField.setText("Define Atom Plane");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        NICS1_dialog.getContentPane().add(NICS1_dialog_textField, gridBagConstraints);

        NICS1_dialog_saveReturnButton.setText("Save and Return");
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        NICS1_dialog.getContentPane().add(NICS1_dialog_saveReturnButton, gridBagConstraints);

        NICS1_dialog_clearButton.setText("Clear");
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 5;
        NICS1_dialog.getContentPane().add(NICS1_dialog_clearButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        NICS1_dialog.getContentPane().add(jSeparator2, gridBagConstraints);

        NICS1_dialog_saveButton.setText("Save");
        NICS1_dialog_saveButton.setEnabled(false);
        NICS1_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(9, 5, 9, 5);
        NICS1_dialog.getContentPane().add(NICS1_dialog_saveButton, gridBagConstraints);

        NICS1_dialog_ChoosePlane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Above Plane", "Below Plane", "Both" }));
        NICS1_dialog_ChoosePlane.setEnabled(false);
        NICS1_dialog_ChoosePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_ChoosePlaneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        NICS1_dialog.getContentPane().add(NICS1_dialog_ChoosePlane, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ghastly Version 0.1");

        jTextAreaCompletedCalculation.setEditable(false);
        jTextAreaCompletedCalculation.setColumns(20);
        jTextAreaCompletedCalculation.setRows(5);
        jTextAreaCompletedCalculation.setText("No Calculations performed yet!");
        jScrollPane1.setViewportView(jTextAreaCompletedCalculation);

        FileMenu.setText("File");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        CloseMenu.setText("Open");
        CloseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseMenuActionPerformed(evt);
            }
        });
        FileMenu.add(CloseMenu);

        jMenuItem2.setText("Close");
        FileMenu.add(jMenuItem2);

        ExitMenu.setText("Exit");
        ExitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenu);

        MainMenu.add(FileMenu);

        GhostAtomMenu.setText("Ghost Atom");
        GhostAtomMenu.setEnabled(false);

        jMenuItem4.setText("New");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        GhostAtomMenu.add(jMenuItem4);

        jMenuItem6.setText("Clear");
        GhostAtomMenu.add(jMenuItem6);

        jMenuItem7.setText("Write to File");
        GhostAtomMenu.add(jMenuItem7);

        MainMenu.add(GhostAtomMenu);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseMenuActionPerformed
        // TODO add your handling code here:
        FileOpen.setFileFilter(filter);
        
        int result = FileOpen.showOpenDialog(this);
	if(result == JFileChooser.CANCEL_OPTION) return;
	try {
		File file = FileOpen.getSelectedFile();
		//java.net.URL url = file.toURI().toURL();
		moleculeData = new GaussFile(file, FileOpen.getTypeDescription(file));
		if(moleculeData != null){
			moleculeDataLoaded = true;
			
			molecule.PassInterfaceParameters(moleculeData.AtomicCoordinates(false), moleculeData.BondArray(), moleculeData.BondGeometry(false), Ghastly);			
                        
                        GhostAtomMenu.setEnabled(true);
                        
		}
 		return;
		
	}
	catch (Exception e) {
		
		return;
	}
    }//GEN-LAST:event_CloseMenuActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        GhostAtomForm.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         GhostAtomForm.setVisible(false);
         
         jTextAreaCompletedCalculation.setText(Ghastly.GetGhostAtomString());
         
    }//GEN-LAST:event_jButton3ActionPerformed

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_FileMenuActionPerformed

    private void AddNewGhostAtomTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewGhostAtomTypeActionPerformed
        // TODO add your handling code here:
        String GhostComboType = (String)ComboBoxGhostType.getSelectedItem();
        
        if(GhostComboType.equals("NICS(0)")){
            
            Ghastly.LockSelection=false;
            AddNewGhostAtomType.setEnabled(false);
            NICSO_dialog.setVisible(true);
                                    
        }else if(GhostComboType.equals("NICS(1)")){
            
            Ghastly.LockSelection=false;
            AddNewGhostAtomType.setEnabled(false);
            NICS1_dialog.setVisible(true);
           
        }else if(GhostComboType.equals("NICS-scan")){
           
        }else if(GhostComboType.equals("NICS-grid")){
            
        }
        
    }//GEN-LAST:event_AddNewGhostAtomTypeActionPerformed

     // buttons to change when a observable value changes
    // in this case, worried about the plane being defined or not 
    // for the ghost atom calculations
    @Override
    public void update(Observable o, Object arg){
        // what to do if no plane
        if(!Ghastly.PlaneCalculated()){
            
                NICS0_dialog_textField.setText("Define Atom Plane");
                NICS1_dialog_textField.setText("Define Atom Plane");
                jTextAreaCompletedCalculation.setText("");
                
                NICS0_dialog_calculateButton.setEnabled(false);
                NICS1_dialog_calculateButton.setEnabled(false);
                NICS1_dialog_ChoosePlane.setEnabled(false);
                
            
        // what to do if a plane is there
        }else{
            
                NICS0_dialog_textField.setText("Atom Plane Defined");
                NICS1_dialog_textField.setText("Atom Plane Defined");
                jTextAreaCompletedCalculation.setText(Ghastly.GetPlaneNormal());
                
                NICS0_dialog_calculateButton.setEnabled(true);
                NICS1_dialog_calculateButton.setEnabled(true);
                NICS1_dialog_ChoosePlane.setEnabled(true);
        }
    }
    
    
    
    
    private void ComboBoxGhostTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxGhostTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxGhostTypeActionPerformed

    private void NICS0_dialog_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_calculateButtonActionPerformed
        
        // TODO add your handling code here:
        // plane must be defined or button would be unavailable
        // create a ghost atom, add it to the proposed list
        // lock the atom selection so that it can't change during
        // the decision
        // display only the proposed ghost atom
        // let the user have the option of clearing the choice 
        // or saving the new ghost atom
        // remove access to the calulate button
        NICS_0 Temp = new NICS_0();
        Temp.Define(0, Ghastly.GetPlane());
        Ghastly.NewProposed(Temp);
        Ghastly.LockSelection = true;
        Ghastly.DisplayProposed = true;        
        NICS0_dialog_clearButton.setEnabled(true);
        NICS0_dialog_saveReturnButton.setEnabled(true);
        NICS0_dialog_saveButton.setEnabled(true);
        NICS0_dialog_calculateButton.setEnabled(false);
    }//GEN-LAST:event_NICS0_dialog_calculateButtonActionPerformed

    private void NICS0_dialog_cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_cancelButtonActionPerformed
        // TODO add your handling code here:
        
        // make sure no atoms are saved
        Ghastly.DisplayProposed = false; 
        Ghastly.LockSelection = true;
        Ghastly.UnselectAtoms = true;
        Ghastly.ExcludeProposed();       
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveButton.setEnabled(false);
        NICS0_dialog_calculateButton.setEnabled(false);
        AddNewGhostAtomType.setEnabled(true);
        NICSO_dialog.setVisible(false);
    }//GEN-LAST:event_NICS0_dialog_cancelButtonActionPerformed

    private void NICS0_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        TempIndex = Ghastly.AddProposed();        
        Ghastly.LockSelection = true;
        Ghastly.DisplayProposed = false;
        Ghastly.UnselectAtoms = true;
        NICS0_dialog_calculateButton.setEnabled(false);
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveButton.setEnabled(false);
        
        // Add to the Ghost Atom Table
        
        Object[] NewRow = {TempIndex, "NICS(0)", new Integer(1),  new Boolean(false),  new Boolean (false)};
        DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();
        /*
        // all this gobledygook just to center integers and strings in the table, needs to be somewhere else probably
        DefaultTableCellRenderer Renderer = new DefaultTableCellRenderer();
        Renderer.setHorizontalAlignment(JLabel.CENTER);
        GhostAtomTable.setDefaultRenderer(String.class, Renderer);
        GhostAtomTable.setDefaultRenderer(Integer.class, Renderer);
        */
        model.addRow(NewRow);
        AddNewGhostAtomType.setEnabled(true);
        NICSO_dialog.setVisible(false);
        
    }//GEN-LAST:event_NICS0_dialog_saveReturnButtonActionPerformed

    private void NICS0_dialog_clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_clearButtonActionPerformed
        // TODO add your handling code here:
        
        // no longer display the proposed ghost atom
        // unlock the selection 
        // unselect selected atoms
        // and remove the propsed atom from the list
        // remove clear button and save button option
        // and enable calculate button
        Ghastly.DisplayProposed = false; 
        Ghastly.LockSelection = false;
        Ghastly.UnselectAtoms = true;
        Ghastly.ExcludeProposed();       
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveButton.setEnabled(false);
        NICS0_dialog_calculateButton.setEnabled(false);
   
        
    }//GEN-LAST:event_NICS0_dialog_clearButtonActionPerformed

    private void ExitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuActionPerformed
        // TODO add your handling code here:       
        System.exit(0);
    }//GEN-LAST:event_ExitMenuActionPerformed

    private void GhostAtomTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_GhostAtomTablePropertyChange
        // TODO add your handling code here:
        // don't need this
    }//GEN-LAST:event_GhostAtomTablePropertyChange

    private void GhostAtomTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GhostAtomTableMousePressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_GhostAtomTableMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //go through the table, look for a row to delete
        // resetting the for loop for each deletion (table size decreases)
        boolean DoneDeleting = false;
        
        while(!DoneDeleting){
            for(int itor = 0; itor < GhostAtomTable.getRowCount(); itor++){
                // see if the last column is asking for a deletion
                if((boolean)GhostAtomTable.getModel().getValueAt(itor, 4)){
                    // remove from data structure
                    Ghastly.RemoveType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                    // delete row from the table
                    DefaultTableModel TempRowDelete = (DefaultTableModel)GhostAtomTable.getModel();
                    TempRowDelete.removeRow(itor);
                    break;
                }
                if(itor == (GhostAtomTable.getRowCount() - 1))DoneDeleting = true;
                
               // edge case, deleted all
                if(GhostAtomTable.getRowCount() == 0)DoneDeleting = true;
            }
            //edge case, deleted all
            if(GhostAtomTable.getRowCount() == 0)DoneDeleting = true;
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void NICS0_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_saveButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        TempIndex = Ghastly.AddProposed();        
        Ghastly.LockSelection = false;
        Ghastly.DisplayProposed = false;
        Ghastly.UnselectAtoms = true;
        NICS0_dialog_calculateButton.setEnabled(false);
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveButton.setEnabled(false);
        // Add to the Ghost Atom Table
        
        Object[] NewRow = {TempIndex, "NICS(0)", new Integer(1),  new Boolean(false),  new Boolean (false)};
        DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
        model.addRow(NewRow);
     
    }//GEN-LAST:event_NICS0_dialog_saveButtonActionPerformed

    private void NICS1_dialog_cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_cancelButtonActionPerformed
        // TODO add your handling code here:
        Ghastly.DisplayProposed = false; 
        Ghastly.LockSelection = true;
        Ghastly.UnselectAtoms = true;
        Ghastly.ExcludeProposed();       
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveButton.setEnabled(false);
        NICS1_dialog_calculateButton.setEnabled(false);
        NICS1_dialog_ChoosePlane.setEnabled(false);
        AddNewGhostAtomType.setEnabled(true);
        NICS1_dialog.setVisible(false);
    }//GEN-LAST:event_NICS1_dialog_cancelButtonActionPerformed

    private void NICS1_dialog_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_calculateButtonActionPerformed
        // TODO add your handling code here:
          // TODO add your handling code here:
        // plane must be defined or button would be unavailable
        // create a ghost atom, add it to the proposed list
        // lock the atom selection so that it can't change during
        // the decision
        // display only the proposed ghost atom
        // let the user have the option of clearing the choice 
        // or saving the new ghost atom
        // remove access to the calulate button
        NICS_1 Temp = new NICS_1();
        
        String PlaneType = (String)NICS1_dialog_ChoosePlane.getSelectedItem();
        if(PlaneType.equals("Above Plane")){
            Temp.Define(0, Ghastly.GetPlane(), 1);
            System.out.println("Positive");
        }else if(PlaneType.equals("Below Plane")){
            Temp.Define(0, Ghastly.GetPlane(), -1);
            System.out.println("Negative");
        }else if(PlaneType.equals("Both")){
            Temp.Define(0, Ghastly.GetPlane(), 0);
            System.out.println("Both");
        }else{
            System.out.println("Shouldn't be here");
        }        
        Ghastly.NewProposed(Temp);
        Ghastly.LockSelection = true;
        Ghastly.DisplayProposed = true;        
        NICS1_dialog_clearButton.setEnabled(true);
        NICS1_dialog_saveReturnButton.setEnabled(true);
        NICS1_dialog_saveButton.setEnabled(true);
        // leave these enabled so the user can immediately choose another plane setting
        //NICS1_dialog_calculateButton.setEnabled(false);
        //NICS1_dialog_ChoosePlane.setEnabled(false);
    }//GEN-LAST:event_NICS1_dialog_calculateButtonActionPerformed

    private void NICS1_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
         // TODO add your handling code here:
         // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        TempIndex = Ghastly.AddProposed();        
        Ghastly.LockSelection = false;
        Ghastly.DisplayProposed = false;
        Ghastly.UnselectAtoms = true;
        NICS1_dialog_calculateButton.setEnabled(false);
        NICS1_dialog_ChoosePlane.setEnabled(false);
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveButton.setEnabled(false);
        // Add to the Ghost Atom Table
        
        Object[] NewRow = {TempIndex, "NICS(1)", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
        DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
        model.addRow(NewRow);
        AddNewGhostAtomType.setEnabled(true);
        NICS1_dialog.setVisible(false);
    }//GEN-LAST:event_NICS1_dialog_saveReturnButtonActionPerformed

    private void NICS1_dialog_clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_clearButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:        
        // no longer display the proposed ghost atom
        // unlock the selection 
        // unselect selected atoms
        // and remove the propsed atom from the list
        // remove clear button and save button option
        // and disable calculate button
        Ghastly.DisplayProposed = false; 
        Ghastly.LockSelection = false;
        Ghastly.UnselectAtoms = true;
        Ghastly.ExcludeProposed();       
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveButton.setEnabled(false);
        NICS1_dialog_calculateButton.setEnabled(false);
        NICS1_dialog_ChoosePlane.setEnabled(false);
   
        
    }//GEN-LAST:event_NICS1_dialog_clearButtonActionPerformed

    private void NICS1_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_saveButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
         // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        TempIndex = Ghastly.AddProposed();        
        Ghastly.LockSelection = false;
        Ghastly.DisplayProposed = false;
        Ghastly.UnselectAtoms = true;
        NICS1_dialog_calculateButton.setEnabled(false);
        NICS1_dialog_ChoosePlane.setEnabled(false);
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveButton.setEnabled(false);
        // Add to the Ghost Atom Table
        
        Object[] NewRow = {TempIndex, "NICS(1)", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
        DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
        model.addRow(NewRow);
     
    }//GEN-LAST:event_NICS1_dialog_saveButtonActionPerformed

    private void GhostAtomTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GhostAtomTableMouseReleased
        // TODO add your handling code here:
         // check to see if a highlight changed or not when the mouse is pressed in the table
        System.out.println("Mouse Clicked in Table." + tempclickcounter);
        tempclickcounter++;
        
        ((AbstractTableModel)GhostAtomTable.getModel()).fireTableDataChanged();
        // check for highlighting in the table and set the flag of all 
         for(int itor = 0; itor < GhostAtomTable.getRowCount(); itor++){
                // see if the table is asking for highlighting
                
                System.out.println(itor + " is Highlighted " + (boolean)GhostAtomTable.getModel().getValueAt(itor, 3));
                if((boolean)GhostAtomTable.getModel().getValueAt(itor, 3)){
                    if(!(boolean)Ghastly.IsHighlighted((Integer)GhostAtomTable.getModel().getValueAt(itor, 0))){
                         Ghastly.HighlightType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                    };
                   
                }else{
                    Ghastly.UnHighlightType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                }
             /*
                // see if the last column is asking for a deletion
                if((boolean)GhostAtomTable.getModel().getValueAt(itor, 4)){
                  
                }else{
                    
                }
                
               */ 
              
            }
        
        
        
    }//GEN-LAST:event_GhostAtomTableMouseReleased

    private void NICS1_dialog_ChoosePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_ChoosePlaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NICS1_dialog_ChoosePlaneActionPerformed

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewGhostAtomType;
    private javax.swing.JMenuItem CloseMenu;
    private javax.swing.JComboBox<String> ComboBoxGhostType;
    private javax.swing.JMenuItem ExitMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JFileChooser FileOpen;
    private javax.swing.JFrame GhostAtomForm;
    private javax.swing.JMenu GhostAtomMenu;
    private javax.swing.JTable GhostAtomTable;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JButton NICS0_dialog_calculateButton;
    private javax.swing.JButton NICS0_dialog_cancelButton;
    private javax.swing.JButton NICS0_dialog_clearButton;
    private javax.swing.JButton NICS0_dialog_saveButton;
    private javax.swing.JButton NICS0_dialog_saveReturnButton;
    private javax.swing.JTextField NICS0_dialog_textField;
    private javax.swing.JFrame NICS1_dialog;
    private javax.swing.JComboBox<String> NICS1_dialog_ChoosePlane;
    private javax.swing.JButton NICS1_dialog_calculateButton;
    private javax.swing.JButton NICS1_dialog_cancelButton;
    private javax.swing.JButton NICS1_dialog_clearButton;
    private javax.swing.JButton NICS1_dialog_saveButton;
    private javax.swing.JButton NICS1_dialog_saveReturnButton;
    private javax.swing.JTextField NICS1_dialog_textField;
    private javax.swing.JFrame NICSO_dialog;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextAreaCompletedCalculation;
    // End of variables declaration//GEN-END:variables
}
