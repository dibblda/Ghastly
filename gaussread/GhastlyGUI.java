/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */





import OpenGLEngine.MainRenderingEngine;
import FileIO.FileReading;
import GhostAtom.*;
import java.awt.Color;
import java.nio.file.*;
import java.io.File;
import java.util.Observer;
import java.util.Observable;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import FileIO.*;



/**
 *
 * @author David Joshua Dibble
 */
public class GhastlyGUI extends javax.swing.JFrame implements Observer{
     // classes and data for communicating between components
    MainRenderingEngine molecule = null;

    FileReading moleculeData = null;

    boolean moleculeDataLoaded = false;

    GhostAtomSet Ghastly = new GhostAtomSet();        
    
    Object GhastlyLock = new Object();
    //FileNameExtensionFilter filter = new FileNameExtensionFilter("Gaussian Input File", "com");
    
    int tempclickcounter = 0;
    int TempIndex;
   
    boolean GlobalCoordinateGrid = false; 
    boolean GlobalCoordinateScan = false;
    
   boolean NICS0 = false, NICS1 = false, NICSSCAN = false, NICSGRID = false;
            
    /**
     * Creates new form Ghastly
     */
    public GhastlyGUI(MainRenderingEngine moleculePassed, GhostAtomSet GhastlyPassed) {
        molecule = moleculePassed;
        Ghastly = GhastlyPassed;        
        initComponents();
    }
    
   
    
   
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GhostAtomForm = new javax.swing.JFrame();
        AddNewGhostAtomType = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Main_Menu_return_button = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        GhostAtomTable = new javax.swing.JTable();
        // all this gobledygook just to center integers and strings in the table, needs to be somewhere else probably
        DefaultTableCellRenderer Renderer = new DefaultTableCellRenderer();
        Renderer.setHorizontalAlignment(JLabel.CENTER);
        GhostAtomTable.setDefaultRenderer(String.class, Renderer);
        GhostAtomTable.setDefaultRenderer(Integer.class, Renderer);
        // done with the added code
        ComboBoxGhostType = new javax.swing.JComboBox<>();
        FileChooser = new javax.swing.JFileChooser();
        NICSO_dialog = new javax.swing.JFrame();
        jPanel17 = new javax.swing.JPanel();
        filler54 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        jPanel16 = new javax.swing.JPanel();
        filler50 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        NICS0_dialog_textField = new javax.swing.JTextField();
        filler51 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 30), new java.awt.Dimension(50, 30), new java.awt.Dimension(50, 30));
        NICS0_dialog_clearButton = new javax.swing.JButton();
        filler49 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        filler53 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        jPanel15 = new javax.swing.JPanel();
        filler48 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS0_dialog_saveButton = new javax.swing.JButton();
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS0_dialog_saveReturnButton = new javax.swing.JButton();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS0_dialog_cancelButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        filler52 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        NICS1_dialog = new javax.swing.JFrame();
        jPanel20 = new javax.swing.JPanel();
        filler65 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        jPanel19 = new javax.swing.JPanel();
        filler62 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        NICS1_dialog_textField = new javax.swing.JTextField();
        filler61 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        NICS1_dialog_ChoosePlane = new javax.swing.JComboBox<>();
        filler60 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        NICS1_dialog_clearButton = new javax.swing.JButton();
        filler59 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30), new java.awt.Dimension(10, 30));
        filler64 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        jPanel18 = new javax.swing.JPanel();
        filler58 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS1_dialog_saveReturnButton = new javax.swing.JButton();
        filler57 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS1_dialog_saveButton = new javax.swing.JButton();
        filler56 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS1_dialog_cancelButton = new javax.swing.JButton();
        filler55 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        filler63 = new javax.swing.Box.Filler(new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10), new java.awt.Dimension(400, 10));
        NICS_Scan_dialog = new javax.swing.JFrame();
        filler23 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550));
        jPanel11 = new javax.swing.JPanel();
        filler46 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        LengthDeltaContainer_Scan = new javax.swing.JPanel();
        filler16 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        jPanel2 = new javax.swing.JPanel();
        NICS_Scan_Delta_textField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        NICS_Scan_MinRange_textField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        NICS_Scan_NumberPoints_textField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        NICS_Scan_MaxRange_textField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        NICS_Scan_ByDelta_jRadioButton = new javax.swing.JRadioButton();
        NICS_Scan_ByPoints_RadioButton = new javax.swing.JRadioButton();
        filler45 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        PlaneDefinitionContainer_Scan = new javax.swing.JPanel();
        filler15 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        jPanel10 = new javax.swing.JPanel();
        NICS_Scan_dialog_textField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NICS_Scan_dialog_clearAtomButton = new javax.swing.JButton();
        NICS_Scan_XExternal_Text = new javax.swing.JTextField();
        NICS_Scan_YExternal_Text = new javax.swing.JTextField();
        NICS_Scan_ZExternal_Text = new javax.swing.JTextField();
        NICS_Scan_By_Atom_Specified_Plane_Radio = new javax.swing.JRadioButton();
        NICS_Scan_By_Global_Coordinate_Plane_Radio = new javax.swing.JRadioButton();
        filler20 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        filler44 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        PolarAngleContainer_Scan = new javax.swing.JPanel();
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        jPanel6 = new javax.swing.JPanel();
        filler22 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        NICS_Scan_Phi_textField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        filler18 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        NICS_Scan_Theta_textField = new javax.swing.JTextField();
        filler17 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        jLabel15 = new javax.swing.JLabel();
        filler21 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        filler43 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        jPanel13 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        filler30 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        NICS_Scan_dialog_clearParameterButton = new javax.swing.JButton();
        filler29 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Scan_Quit_Button = new javax.swing.JButton();
        filler27 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Scan_dialog_saveButton = new javax.swing.JButton();
        filler28 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Scan_dialog_saveReturnButton = new javax.swing.JButton();
        filler31 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23), new java.awt.Dimension(10, 23));
        filler47 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        filler42 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        filler19 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550));
        NICS_Scan_buttonGroup = new javax.swing.ButtonGroup();
        NICS_Scan_AtomSelection_buttonGroup = new javax.swing.ButtonGroup();
        NICS_Grid_dialog = new javax.swing.JFrame();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550));
        jPanel14 = new javax.swing.JPanel();
        filler41 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        GridCoordinateContainer = new javax.swing.JPanel();
        XYZContainer = new javax.swing.JPanel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158));
        XParameters = new javax.swing.JPanel();
        NICS_Grid_Points_label1 = new javax.swing.JTextField();
        NICS_Grid_XDelta_textField = new javax.swing.JTextField();
        NICS_Grid_XNumberPoints_textField = new javax.swing.JTextField();
        NICS_Grid_XMinRange_textField = new javax.swing.JTextField();
        NICS_Grid_MinRange_label1 = new javax.swing.JTextField();
        NICS_Grid_MaxRange_label1 = new javax.swing.JTextField();
        NICS_Grid_XMaxRange_textField = new javax.swing.JTextField();
        NICS_Grid_Delta_label1 = new javax.swing.JTextField();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158));
        YParameters = new javax.swing.JPanel();
        NICS_Grid_Points_label = new javax.swing.JTextField();
        NICS_Grid_YDelta_textField = new javax.swing.JTextField();
        NICS_Grid_YNumberPoints_textField = new javax.swing.JTextField();
        NICS_Grid_YMinRange_textField = new javax.swing.JTextField();
        NICS_Grid_MinRange_label = new javax.swing.JTextField();
        NICS_Grid_MaxRange_label = new javax.swing.JTextField();
        NICS_Grid_YMaxRange_textField = new javax.swing.JTextField();
        NICS_Grid_Delta_label = new javax.swing.JTextField();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158));
        ZParameters = new javax.swing.JPanel();
        NICS_Grid_Points_label2 = new javax.swing.JTextField();
        NICS_Grid_ZDelta_textField = new javax.swing.JTextField();
        NICS_Grid_ZNumberPoints_textField = new javax.swing.JTextField();
        NICS_Grid_ZMinRange_textField = new javax.swing.JTextField();
        NICS_Grid_MinRange_label2 = new javax.swing.JTextField();
        NICS_Grid_MaxRange_label2 = new javax.swing.JTextField();
        NICS_Grid_ZMaxRange_textField = new javax.swing.JTextField();
        NICS_Grid_Delta_label2 = new javax.swing.JTextField();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158), new java.awt.Dimension(10, 158));
        DeltaPointContainer = new javax.swing.JPanel();
        NICS_Grid_ByPoints_RadioButton = new javax.swing.JRadioButton();
        NICS_Grid_ByDelta_RadioButton = new javax.swing.JRadioButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        filler40 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        PlaneDefinitionContainer = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        NICS_Grid_dialog_clearAtomButton = new javax.swing.JButton();
        NICS_Grid_By_Atom_Specified_Plane_Radio = new javax.swing.JRadioButton();
        NICS_Grid_dialog_textField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        NICS_Grid_By_Global_Coordinate_Plane_Radio = new javax.swing.JRadioButton();
        NICS_Grid_YExternal_Text = new javax.swing.JTextField();
        NICS_Grid_XExternal_Text = new javax.swing.JTextField();
        NICS_Grid_ZExternal_Text = new javax.swing.JTextField();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        filler39 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        PolarAngleContainer = new javax.swing.JPanel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0), new java.awt.Dimension(500, 0));
        jPanel1 = new javax.swing.JPanel();
        filler26 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        PhiContainer = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        NICS_Grid_Phi_textField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        filler25 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        ThetaContainer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NICS_Grid_Theta_textField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        filler24 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76), new java.awt.Dimension(10, 76));
        filler38 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        jPanel5 = new javax.swing.JPanel();
        filler36 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Grid_dialog_clearParameterButton = new javax.swing.JButton();
        filler35 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Grid_Quit_Button = new javax.swing.JButton();
        filler34 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Grid_dialog_saveButton = new javax.swing.JButton();
        filler33 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        NICS_Grid_dialog_saveReturnButton = new javax.swing.JButton();
        filler32 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23), new java.awt.Dimension(5, 23));
        filler37 = new javax.swing.Box.Filler(new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10), new java.awt.Dimension(500, 10));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550), new java.awt.Dimension(10, 550));
        NICS_Grid_buttonGroup = new javax.swing.ButtonGroup();
        NICS_Grid_AtomSelection_buttonGroup = new javax.swing.ButtonGroup();
        FileChooserSaveOptions = new javax.swing.JPanel();
        filler71 = new javax.swing.Box.Filler(new java.awt.Dimension(3, 120), new java.awt.Dimension(3, 120), new java.awt.Dimension(3, 120));
        jPanel21 = new javax.swing.JPanel();
        filler69 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 10), new java.awt.Dimension(100, 10), new java.awt.Dimension(100, 10));
        jLabel19 = new javax.swing.JLabel();
        filler68 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5));
        GhostAtomNameSelected = new javax.swing.JTextField();
        filler67 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5));
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        filler66 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5), new java.awt.Dimension(100, 5));
        IncludeMolecule = new javax.swing.JCheckBox();
        filler72 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 10), new java.awt.Dimension(100, 10), new java.awt.Dimension(100, 10));
        filler70 = new javax.swing.Box.Filler(new java.awt.Dimension(3, 120), new java.awt.Dimension(3, 120), new java.awt.Dimension(3, 120));
        BlankPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCompletedCalculation = new javax.swing.JTextArea();
        MainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        CloseMenu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        ExitMenu = new javax.swing.JMenuItem();
        GhostAtomMenu = new javax.swing.JMenu();
        NewGhostAtom = new javax.swing.JMenuItem();
        ClearGhostAtom = new javax.swing.JMenuItem();
        SaveGhostAtom = new javax.swing.JMenuItem();

        GhostAtomForm.setMinimumSize(new java.awt.Dimension(560, 500));
        GhostAtomForm.setResizable(false);

        AddNewGhostAtomType.setText("Add Group");
        AddNewGhostAtomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewGhostAtomTypeActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Group(s)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Main_Menu_return_button.setText("Main Menu");
        Main_Menu_return_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main_Menu_return_buttonActionPerformed(evt);
            }
        });

        GhostAtomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Ghost Type", "Number of Atoms", "Highlight", "Delete?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GhostAtomTable.setRowSelectionAllowed(false);
        GhostAtomTable.getTableHeader().setReorderingAllowed(false);
        GhostAtomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GhostAtomTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GhostAtomTableMouseReleased(evt);
            }
        });
        GhostAtomTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                GhostAtomTablePropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(GhostAtomTable);
        if (GhostAtomTable.getColumnModel().getColumnCount() > 0) {
            GhostAtomTable.getColumnModel().getColumn(0).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(1).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(2).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(3).setResizable(false);
            GhostAtomTable.getColumnModel().getColumn(4).setResizable(false);
        }
        // added this because an extra data column unimportant to the user but needed  // by the gui is added. this removes it from view during runtime, I think,  // but not from being accessible//  
        //TableColumnModel tempTable = GhostAtomTable.getColumnModel();  
        GhostAtomTable.removeColumn(GhostAtomTable.getColumn("Index"));

        ComboBoxGhostType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NICS(0)", "NICS(1)", "NICS-scan", "NICS-grid" }));
        ComboBoxGhostType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxGhostTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GhostAtomFormLayout = new javax.swing.GroupLayout(GhostAtomForm.getContentPane());
        GhostAtomForm.getContentPane().setLayout(GhostAtomFormLayout);
        GhostAtomFormLayout.setHorizontalGroup(
            GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GhostAtomFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(GhostAtomFormLayout.createSequentialGroup()
                        .addComponent(ComboBoxGhostType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddNewGhostAtomType, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Main_Menu_return_button)))
                .addContainerGap())
        );
        GhostAtomFormLayout.setVerticalGroup(
            GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GhostAtomFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GhostAtomFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(Main_Menu_return_button)
                    .addComponent(AddNewGhostAtomType)
                    .addComponent(ComboBoxGhostType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileChooserActionPerformed(evt);
            }
        });

        NICSO_dialog.setTitle("NICS(0) Calculation");
        NICSO_dialog.setMaximumSize(new java.awt.Dimension(400, 140));
        NICSO_dialog.setMinimumSize(new java.awt.Dimension(400, 140));
        NICSO_dialog.setPreferredSize(new java.awt.Dimension(400, 140));
        NICSO_dialog.setResizable(false);
        NICSO_dialog.setSize(new java.awt.Dimension(400, 140));
        NICSO_dialog.getContentPane().setLayout(new javax.swing.BoxLayout(NICSO_dialog.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel17.setMaximumSize(new java.awt.Dimension(400, 117));
        jPanel17.setMinimumSize(new java.awt.Dimension(400, 117));
        jPanel17.setPreferredSize(new java.awt.Dimension(400, 117));
        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.Y_AXIS));
        jPanel17.add(filler54);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plane Definition", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.X_AXIS));
        jPanel16.add(filler50);

        NICS0_dialog_textField.setEditable(false);
        NICS0_dialog_textField.setBackground(new java.awt.Color(255, 51, 0));
        NICS0_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS0_dialog_textField.setText("Define Plane");
        NICS0_dialog_textField.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_textField.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_textField.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_textFieldActionPerformed(evt);
            }
        });
        jPanel16.add(NICS0_dialog_textField);
        jPanel16.add(filler51);

        NICS0_dialog_clearButton.setText("Clear");
        NICS0_dialog_clearButton.setEnabled(false);
        NICS0_dialog_clearButton.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_clearButton.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_clearButton.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS0_dialog_clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_clearButtonActionPerformed(evt);
            }
        });
        jPanel16.add(NICS0_dialog_clearButton);
        jPanel16.add(filler49);

        jPanel17.add(jPanel16);
        jPanel17.add(filler53);

        jPanel15.setPreferredSize(new java.awt.Dimension(379, 23));
        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.X_AXIS));
        jPanel15.add(filler48);

        NICS0_dialog_saveButton.setText("Save");
        NICS0_dialog_saveButton.setEnabled(false);
        NICS0_dialog_saveButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_saveButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_saveButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_saveButtonActionPerformed(evt);
            }
        });
        jPanel15.add(NICS0_dialog_saveButton);
        jPanel15.add(filler13);

        NICS0_dialog_saveReturnButton.setText("Save and Return");
        NICS0_dialog_saveReturnButton.setEnabled(false);
        NICS0_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        jPanel15.add(NICS0_dialog_saveReturnButton);
        jPanel15.add(filler12);

        NICS0_dialog_cancelButton.setText("Quit");
        NICS0_dialog_cancelButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_cancelButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_cancelButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS0_dialog_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS0_dialog_cancelButtonActionPerformed(evt);
            }
        });
        jPanel15.add(NICS0_dialog_cancelButton);
        jPanel15.add(filler1);

        jPanel17.add(jPanel15);
        jPanel17.add(filler52);

        NICSO_dialog.getContentPane().add(jPanel17);

        NICS1_dialog.setTitle("NICS(1)  Calculation");
        NICS1_dialog.setMinimumSize(new java.awt.Dimension(400, 140));
        NICS1_dialog.setResizable(false);
        NICS1_dialog.setSize(new java.awt.Dimension(400, 140));
        NICS1_dialog.getContentPane().setLayout(new javax.swing.BoxLayout(NICS1_dialog.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel20.setMaximumSize(new java.awt.Dimension(400, 117));
        jPanel20.setMinimumSize(new java.awt.Dimension(400, 117));
        jPanel20.setPreferredSize(new java.awt.Dimension(400, 117));
        jPanel20.setLayout(new javax.swing.BoxLayout(jPanel20, javax.swing.BoxLayout.Y_AXIS));
        jPanel20.add(filler65);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plane Definition and Ghost Atom Location", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel19.setLayout(new javax.swing.BoxLayout(jPanel19, javax.swing.BoxLayout.LINE_AXIS));
        jPanel19.add(filler62);

        NICS1_dialog_textField.setEditable(false);
        NICS1_dialog_textField.setBackground(new java.awt.Color(255, 0, 0));
        NICS1_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS1_dialog_textField.setText("Define Plane");
        NICS1_dialog_textField.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_textField.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_textField.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel19.add(NICS1_dialog_textField);
        jPanel19.add(filler61);

        NICS1_dialog_ChoosePlane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Above Plane", "Below Plane", "Both" }));
        NICS1_dialog_ChoosePlane.setEnabled(false);
        NICS1_dialog_ChoosePlane.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_ChoosePlane.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_ChoosePlane.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_ChoosePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_ChoosePlaneActionPerformed(evt);
            }
        });
        jPanel19.add(NICS1_dialog_ChoosePlane);
        jPanel19.add(filler60);

        NICS1_dialog_clearButton.setText("Clear");
        NICS1_dialog_clearButton.setEnabled(false);
        NICS1_dialog_clearButton.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_clearButton.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_clearButton.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS1_dialog_clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_clearButtonActionPerformed(evt);
            }
        });
        jPanel19.add(NICS1_dialog_clearButton);
        jPanel19.add(filler59);

        jPanel20.add(jPanel19);
        jPanel20.add(filler64);

        jPanel18.setPreferredSize(new java.awt.Dimension(379, 23));
        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.X_AXIS));
        jPanel18.add(filler58);

        NICS1_dialog_saveReturnButton.setText("Save and Return");
        NICS1_dialog_saveReturnButton.setEnabled(false);
        NICS1_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        jPanel18.add(NICS1_dialog_saveReturnButton);
        jPanel18.add(filler57);

        NICS1_dialog_saveButton.setText("Save");
        NICS1_dialog_saveButton.setEnabled(false);
        NICS1_dialog_saveButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_saveButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_saveButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_saveButtonActionPerformed(evt);
            }
        });
        jPanel18.add(NICS1_dialog_saveButton);
        jPanel18.add(filler56);

        NICS1_dialog_cancelButton.setText("Quit");
        NICS1_dialog_cancelButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_cancelButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_cancelButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS1_dialog_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS1_dialog_cancelButtonActionPerformed(evt);
            }
        });
        jPanel18.add(NICS1_dialog_cancelButton);
        jPanel18.add(filler55);

        jPanel20.add(jPanel18);
        jPanel20.add(filler63);

        NICS1_dialog.getContentPane().add(jPanel20);

        NICS_Scan_dialog.setTitle("NICS Scan Calculation");
        NICS_Scan_dialog.setMinimumSize(new java.awt.Dimension(530, 550));
        NICS_Scan_dialog.setResizable(false);
        NICS_Scan_dialog.getContentPane().setLayout(new javax.swing.BoxLayout(NICS_Scan_dialog.getContentPane(), javax.swing.BoxLayout.X_AXIS));
        NICS_Scan_dialog.getContentPane().add(filler23);

        jPanel11.setMinimumSize(new java.awt.Dimension(500, 550));
        jPanel11.setName(""); // NOI18N
        jPanel11.setPreferredSize(new java.awt.Dimension(500, 550));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.Y_AXIS));
        jPanel11.add(filler46);

        LengthDeltaContainer_Scan.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scan Dimensions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        LengthDeltaContainer_Scan.setLayout(new javax.swing.BoxLayout(LengthDeltaContainer_Scan, javax.swing.BoxLayout.Y_AXIS));
        LengthDeltaContainer_Scan.add(filler16);

        NICS_Scan_Delta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_Delta_textField.setText("1.0");
        NICS_Scan_Delta_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Delta_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Delta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_Delta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        jLabel6.setText("Minumum");

        NICS_Scan_MinRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_MinRange_textField.setText("-5.0");
        NICS_Scan_MinRange_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_MinRange_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_MinRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_MinRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        jLabel7.setText("Maximum");

        jLabel9.setText("Points");

        NICS_Scan_NumberPoints_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_NumberPoints_textField.setText("11");
        NICS_Scan_NumberPoints_textField.setAutoscrolls(false);
        NICS_Scan_NumberPoints_textField.setEnabled(false);
        NICS_Scan_NumberPoints_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_NumberPoints_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_NumberPoints_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_NumberPoints_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        jLabel8.setText("Delta");

        NICS_Scan_MaxRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_MaxRange_textField.setText("5.0");
        NICS_Scan_MaxRange_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_MaxRange_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_MaxRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_MaxRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NICS_Scan_MinRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NICS_Scan_MaxRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NICS_Scan_Delta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NICS_Scan_NumberPoints_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Scan_MinRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_MaxRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_Delta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_NumberPoints_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        LengthDeltaContainer_Scan.add(jPanel2);

        NICS_Scan_buttonGroup.add(NICS_Scan_ByDelta_jRadioButton);
        NICS_Scan_ByDelta_jRadioButton.setSelected(true);
        NICS_Scan_ByDelta_jRadioButton.setText(" Interval By Delta");
        NICS_Scan_ByDelta_jRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_IntervelByDelta_Radio_Action(evt);
            }
        });

        NICS_Scan_buttonGroup.add(NICS_Scan_ByPoints_RadioButton);
        NICS_Scan_ByPoints_RadioButton.setText(" Interval By Points");
        NICS_Scan_ByPoints_RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_IntervalByPoint_Radio_Action(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(NICS_Scan_ByDelta_jRadioButton)
                .addGap(10, 10, 10)
                .addComponent(NICS_Scan_ByPoints_RadioButton)
                .addGap(10, 10, 10))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Scan_ByDelta_jRadioButton)
                    .addComponent(NICS_Scan_ByPoints_RadioButton))
                .addContainerGap())
        );

        LengthDeltaContainer_Scan.add(jPanel3);

        jPanel11.add(LengthDeltaContainer_Scan);
        jPanel11.add(filler45);

        PlaneDefinitionContainer_Scan.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plane Definition", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        PlaneDefinitionContainer_Scan.setMinimumSize(new java.awt.Dimension(575, 120));
        PlaneDefinitionContainer_Scan.setName(""); // NOI18N
        PlaneDefinitionContainer_Scan.setPreferredSize(new java.awt.Dimension(575, 120));
        PlaneDefinitionContainer_Scan.setRequestFocusEnabled(false);
        PlaneDefinitionContainer_Scan.setLayout(new javax.swing.BoxLayout(PlaneDefinitionContainer_Scan, javax.swing.BoxLayout.Y_AXIS));
        PlaneDefinitionContainer_Scan.add(filler15);

        jPanel10.setAutoscrolls(true);
        jPanel10.setMinimumSize(new java.awt.Dimension(308, 84));
        jPanel10.setPreferredSize(new java.awt.Dimension(308, 84));
        jPanel10.setRequestFocusEnabled(false);

        NICS_Scan_dialog_textField.setEditable(false);
        NICS_Scan_dialog_textField.setBackground(new java.awt.Color(255, 0, 51));
        NICS_Scan_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_dialog_textField.setText("Define Plane");
        NICS_Scan_dialog_textField.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS_Scan_dialog_textField.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS_Scan_dialog_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_dialog_textFieldActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html><font color=\"red\"><b>X</b></font> Center");
        jLabel5.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel5.setPreferredSize(new java.awt.Dimension(58, 20));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<html><font color=\"green\"><b>Y</b></font> Center");
        jLabel4.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(58, 20));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html><font color=\"blue\"><b>Z</b></font> Center");
        jLabel3.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(58, 20));

        NICS_Scan_dialog_clearAtomButton.setText("Clear");
        NICS_Scan_dialog_clearAtomButton.setEnabled(false);
        NICS_Scan_dialog_clearAtomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NICS_Scan_dialog_clearAtomButton.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS_Scan_dialog_clearAtomButton.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS_Scan_dialog_clearAtomButton.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS_Scan_dialog_clearAtomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_dialog_clearAtomButtonActionPerformed(evt);
            }
        });

        NICS_Scan_XExternal_Text.setEditable(false);
        NICS_Scan_XExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_XExternal_Text.setText("0.0");
        NICS_Scan_XExternal_Text.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_XExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_XExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_External_Focus_Lost(evt);
            }
        });
        NICS_Scan_XExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_External_Action_Performed(evt);
            }
        });

        NICS_Scan_YExternal_Text.setEditable(false);
        NICS_Scan_YExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_YExternal_Text.setText("0.0");
        NICS_Scan_YExternal_Text.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_YExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_YExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_External_Focus_Lost(evt);
            }
        });
        NICS_Scan_YExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_External_Action_Performed(evt);
            }
        });

        NICS_Scan_ZExternal_Text.setEditable(false);
        NICS_Scan_ZExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_ZExternal_Text.setText("0.0");
        NICS_Scan_ZExternal_Text.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_ZExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_ZExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_External_Focus_Lost(evt);
            }
        });
        NICS_Scan_ZExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_External_Action_Performed(evt);
            }
        });

        NICS_Scan_AtomSelection_buttonGroup.add(NICS_Scan_By_Atom_Specified_Plane_Radio);
        NICS_Scan_By_Atom_Specified_Plane_Radio.setSelected(true);
        NICS_Scan_By_Atom_Specified_Plane_Radio.setText("Atom Plane Coordinate Grid");
        NICS_Scan_By_Atom_Specified_Plane_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_By_Atom_Specified_Plane_RadioActionPerformed(evt);
            }
        });

        NICS_Scan_AtomSelection_buttonGroup.add(NICS_Scan_By_Global_Coordinate_Plane_Radio);
        NICS_Scan_By_Global_Coordinate_Plane_Radio.setText("Global Coordinate Grid");
        NICS_Scan_By_Global_Coordinate_Plane_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_By_Global_Coordinate_Plane_RadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(NICS_Scan_dialog_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NICS_Scan_By_Atom_Specified_Plane_Radio)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(NICS_Scan_dialog_clearAtomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NICS_Scan_XExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(NICS_Scan_YExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NICS_Scan_ZExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(NICS_Scan_By_Global_Coordinate_Plane_Radio)))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Scan_dialog_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Scan_dialog_clearAtomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_XExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_YExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_ZExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NICS_Scan_By_Global_Coordinate_Plane_Radio)
                    .addComponent(NICS_Scan_By_Atom_Specified_Plane_Radio))
                .addGap(10, 10, 10))
        );

        PlaneDefinitionContainer_Scan.add(jPanel10);
        PlaneDefinitionContainer_Scan.add(filler20);

        jPanel11.add(PlaneDefinitionContainer_Scan);
        jPanel11.add(filler44);

        PolarAngleContainer_Scan.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scan Polar Angle", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        PolarAngleContainer_Scan.setMinimumSize(new java.awt.Dimension(500, 99));
        PolarAngleContainer_Scan.setPreferredSize(new java.awt.Dimension(500, 99));
        PolarAngleContainer_Scan.setLayout(new javax.swing.BoxLayout(PolarAngleContainer_Scan, javax.swing.BoxLayout.Y_AXIS));
        PolarAngleContainer_Scan.add(filler14);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));
        jPanel6.add(filler22);

        jLabel10.setText("<html><center>&Phi<br><center>(degrees)");

        NICS_Scan_Phi_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_Phi_textField.setText("0.0");
        NICS_Scan_Phi_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Phi_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Phi_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_Phi_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_Phi_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NICS_Scan_Phi_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.add(jPanel9);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Y_50.png"))); // NOI18N
        jPanel6.add(jLabel14);
        jPanel6.add(filler18);

        jLabel11.setText("<html><center>&Theta<br><center>(degrees)");

        NICS_Scan_Theta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Scan_Theta_textField.setText("0.0");
        NICS_Scan_Theta_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Theta_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Scan_Theta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Scan_Text_Focus_Lost(evt);
            }
        });
        NICS_Scan_Theta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Scan_Theta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NICS_Scan_Theta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        jPanel6.add(jPanel8);
        jPanel6.add(filler17);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Z_50.png"))); // NOI18N
        jLabel15.setToolTipText("");
        jPanel6.add(jLabel15);
        jPanel6.add(filler21);

        PolarAngleContainer_Scan.add(jPanel6);

        jPanel11.add(PolarAngleContainer_Scan);
        jPanel11.add(filler43);

        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.Y_AXIS));

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.Y_AXIS));

        jPanel7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel7.setMaximumSize(new java.awt.Dimension(500, 30));
        jPanel7.setMinimumSize(new java.awt.Dimension(500, 30));
        jPanel7.setPreferredSize(new java.awt.Dimension(500, 30));
        jPanel7.setRequestFocusEnabled(false);
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.X_AXIS));
        jPanel7.add(filler30);

        NICS_Scan_dialog_clearParameterButton.setText("Clear");
        NICS_Scan_dialog_clearParameterButton.setEnabled(false);
        NICS_Scan_dialog_clearParameterButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_clearParameterButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_clearParameterButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_clearParameterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_dialog_clearParameterButtonActionPerformed(evt);
            }
        });
        jPanel7.add(NICS_Scan_dialog_clearParameterButton);
        jPanel7.add(filler29);

        NICS_Scan_Quit_Button.setText("Quit");
        NICS_Scan_Quit_Button.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_Quit_Button.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_Quit_Button.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Scan_Quit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_Quit_ButtonActionPerformed(evt);
            }
        });
        jPanel7.add(NICS_Scan_Quit_Button);
        jPanel7.add(filler27);

        NICS_Scan_dialog_saveButton.setText("Save");
        NICS_Scan_dialog_saveButton.setEnabled(false);
        NICS_Scan_dialog_saveButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_saveButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_saveButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Scan_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_dialog_saveButtonActionPerformed(evt);
            }
        });
        jPanel7.add(NICS_Scan_dialog_saveButton);
        jPanel7.add(filler28);

        NICS_Scan_dialog_saveReturnButton.setText("Save and Return");
        NICS_Scan_dialog_saveReturnButton.setEnabled(false);
        NICS_Scan_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Scan_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        jPanel7.add(NICS_Scan_dialog_saveReturnButton);
        jPanel7.add(filler31);

        jPanel12.add(jPanel7);

        jPanel13.add(jPanel12);
        jPanel13.add(filler47);

        jPanel11.add(jPanel13);
        jPanel11.add(filler42);

        NICS_Scan_dialog.getContentPane().add(jPanel11);
        NICS_Scan_dialog.getContentPane().add(filler19);

        NICS_Grid_dialog.setTitle("NICS Grid Calculation");
        NICS_Grid_dialog.setMaximumSize(new java.awt.Dimension(2000, 2000));
        NICS_Grid_dialog.setMinimumSize(new java.awt.Dimension(530, 550));
        NICS_Grid_dialog.setPreferredSize(new java.awt.Dimension(530, 550));
        NICS_Grid_dialog.setResizable(false);
        NICS_Grid_dialog.getContentPane().setLayout(new javax.swing.BoxLayout(NICS_Grid_dialog.getContentPane(), javax.swing.BoxLayout.X_AXIS));
        NICS_Grid_dialog.getContentPane().add(filler10);

        jPanel14.setMinimumSize(new java.awt.Dimension(500, 600));
        jPanel14.setOpaque(false);
        jPanel14.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.Y_AXIS));
        jPanel14.add(filler41);

        GridCoordinateContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grid Dimensions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        GridCoordinateContainer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        GridCoordinateContainer.setFocusCycleRoot(true);
        GridCoordinateContainer.setMinimumSize(new java.awt.Dimension(500, 210));
        GridCoordinateContainer.setOpaque(false);
        GridCoordinateContainer.setPreferredSize(new java.awt.Dimension(500, 210));
        GridCoordinateContainer.setLayout(new javax.swing.BoxLayout(GridCoordinateContainer, javax.swing.BoxLayout.Y_AXIS));

        XYZContainer.setMinimumSize(new java.awt.Dimension(470, 158));
        XYZContainer.setPreferredSize(new java.awt.Dimension(470, 170));
        XYZContainer.setLayout(new javax.swing.BoxLayout(XYZContainer, javax.swing.BoxLayout.X_AXIS));
        XYZContainer.add(filler7);

        XParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html><font color=\"red\"><b>X</b></font> Parameters", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        XParameters.setAlignmentX(0.25F);
        XParameters.setMinimumSize(new java.awt.Dimension(148, 158));
        XParameters.setName(""); // NOI18N
        XParameters.setPreferredSize(new java.awt.Dimension(148, 158));

        NICS_Grid_Points_label1.setEditable(false);
        NICS_Grid_Points_label1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Points_label1.setText("Points");
        NICS_Grid_Points_label1.setBorder(null);

        NICS_Grid_XDelta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_XDelta_textField.setText("1.0");
        NICS_Grid_XDelta_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XDelta_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XDelta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_XDelta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_XNumberPoints_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_XNumberPoints_textField.setText("11");
        NICS_Grid_XNumberPoints_textField.setAutoscrolls(false);
        NICS_Grid_XNumberPoints_textField.setEnabled(false);
        NICS_Grid_XNumberPoints_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XNumberPoints_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XNumberPoints_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_XNumberPoints_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_XMinRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_XMinRange_textField.setText("-2.0");
        NICS_Grid_XMinRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XMinRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XMinRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_XMinRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_MinRange_label1.setEditable(false);
        NICS_Grid_MinRange_label1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MinRange_label1.setText("Minimum");
        NICS_Grid_MinRange_label1.setBorder(null);
        NICS_Grid_MinRange_label1.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_MaxRange_label1.setEditable(false);
        NICS_Grid_MaxRange_label1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MaxRange_label1.setText("Maximum");
        NICS_Grid_MaxRange_label1.setBorder(null);
        NICS_Grid_MaxRange_label1.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_XMaxRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_XMaxRange_textField.setText("2.0");
        NICS_Grid_XMaxRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XMaxRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_XMaxRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_XMaxRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_Delta_label1.setEditable(false);
        NICS_Grid_Delta_label1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Delta_label1.setText("Delta");
        NICS_Grid_Delta_label1.setBorder(null);

        javax.swing.GroupLayout XParametersLayout = new javax.swing.GroupLayout(XParameters);
        XParameters.setLayout(XParametersLayout);
        XParametersLayout.setHorizontalGroup(
            XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(XParametersLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NICS_Grid_XMinRange_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_XDelta_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_Delta_label1)
                    .addComponent(NICS_Grid_MinRange_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NICS_Grid_XMaxRange_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_MaxRange_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_Points_label1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NICS_Grid_XNumberPoints_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        XParametersLayout.setVerticalGroup(
            XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(XParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_MinRange_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_MaxRange_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_XMinRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_XMaxRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_Delta_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_Points_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(XParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_XDelta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_XNumberPoints_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        XYZContainer.add(XParameters);
        XYZContainer.add(filler5);

        YParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html><font color=\"green\"><b>Y</b></font> Parameters", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        YParameters.setMinimumSize(new java.awt.Dimension(148, 158));
        YParameters.setPreferredSize(new java.awt.Dimension(148, 158));
        YParameters.setRequestFocusEnabled(false);

        NICS_Grid_Points_label.setEditable(false);
        NICS_Grid_Points_label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Points_label.setText("Points");
        NICS_Grid_Points_label.setBorder(null);

        NICS_Grid_YDelta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_YDelta_textField.setText("1.0");
        NICS_Grid_YDelta_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YDelta_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YDelta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_YDelta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_YNumberPoints_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_YNumberPoints_textField.setText("11");
        NICS_Grid_YNumberPoints_textField.setAutoscrolls(false);
        NICS_Grid_YNumberPoints_textField.setEnabled(false);
        NICS_Grid_YNumberPoints_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YNumberPoints_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YNumberPoints_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_YNumberPoints_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_YMinRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_YMinRange_textField.setText("-2.0");
        NICS_Grid_YMinRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YMinRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YMinRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_YMinRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_MinRange_label.setEditable(false);
        NICS_Grid_MinRange_label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MinRange_label.setText("Minimum");
        NICS_Grid_MinRange_label.setBorder(null);
        NICS_Grid_MinRange_label.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_MaxRange_label.setEditable(false);
        NICS_Grid_MaxRange_label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MaxRange_label.setText("Maximum");
        NICS_Grid_MaxRange_label.setBorder(null);
        NICS_Grid_MaxRange_label.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_YMaxRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_YMaxRange_textField.setText("2.0");
        NICS_Grid_YMaxRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YMaxRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_YMaxRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_YMaxRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_Delta_label.setEditable(false);
        NICS_Grid_Delta_label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Delta_label.setText("Delta");
        NICS_Grid_Delta_label.setBorder(null);

        javax.swing.GroupLayout YParametersLayout = new javax.swing.GroupLayout(YParameters);
        YParameters.setLayout(YParametersLayout);
        YParametersLayout.setHorizontalGroup(
            YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(YParametersLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NICS_Grid_Delta_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NICS_Grid_YMinRange_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_YDelta_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_MinRange_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NICS_Grid_YMaxRange_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_YNumberPoints_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_MaxRange_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_Points_label))
                .addGap(10, 10, 10))
        );
        YParametersLayout.setVerticalGroup(
            YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(YParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_MinRange_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_MaxRange_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NICS_Grid_YMinRange_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_YMaxRange_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_Delta_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_Points_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(YParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_YDelta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_YNumberPoints_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        XYZContainer.add(YParameters);
        XYZContainer.add(filler3);

        ZParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html><font color=\"blue\"><b>Z</b></font> Parameters", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        ZParameters.setAlignmentX(0.75F);
        ZParameters.setMinimumSize(new java.awt.Dimension(148, 158));

        NICS_Grid_Points_label2.setEditable(false);
        NICS_Grid_Points_label2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Points_label2.setText("Points");
        NICS_Grid_Points_label2.setBorder(null);

        NICS_Grid_ZDelta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_ZDelta_textField.setText("1.0");
        NICS_Grid_ZDelta_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZDelta_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZDelta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_ZDelta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_ZNumberPoints_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_ZNumberPoints_textField.setText("11");
        NICS_Grid_ZNumberPoints_textField.setAutoscrolls(false);
        NICS_Grid_ZNumberPoints_textField.setEnabled(false);
        NICS_Grid_ZNumberPoints_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZNumberPoints_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZNumberPoints_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_ZNumberPoints_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_ZMinRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_ZMinRange_textField.setText("-2.0");
        NICS_Grid_ZMinRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZMinRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZMinRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_ZMinRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_MinRange_label2.setEditable(false);
        NICS_Grid_MinRange_label2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MinRange_label2.setText("Minimum");
        NICS_Grid_MinRange_label2.setBorder(null);
        NICS_Grid_MinRange_label2.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_MaxRange_label2.setEditable(false);
        NICS_Grid_MaxRange_label2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_MaxRange_label2.setText("Maximum");
        NICS_Grid_MaxRange_label2.setBorder(null);
        NICS_Grid_MaxRange_label2.setPreferredSize(new java.awt.Dimension(55, 20));

        NICS_Grid_ZMaxRange_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_ZMaxRange_textField.setText("2.0");
        NICS_Grid_ZMaxRange_textField.setMinimumSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZMaxRange_textField.setPreferredSize(new java.awt.Dimension(55, 20));
        NICS_Grid_ZMaxRange_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_ZMaxRange_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_Delta_label2.setEditable(false);
        NICS_Grid_Delta_label2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Delta_label2.setText("Delta");
        NICS_Grid_Delta_label2.setBorder(null);

        javax.swing.GroupLayout ZParametersLayout = new javax.swing.GroupLayout(ZParameters);
        ZParameters.setLayout(ZParametersLayout);
        ZParametersLayout.setHorizontalGroup(
            ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NICS_Grid_Delta_label2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NICS_Grid_ZMinRange_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_MinRange_label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_ZDelta_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(NICS_Grid_Points_label2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NICS_Grid_ZMaxRange_textField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_MaxRange_label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NICS_Grid_ZNumberPoints_textField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        ZParametersLayout.setVerticalGroup(
            ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_MinRange_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_MaxRange_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_ZMinRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_ZMaxRange_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_Delta_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_Points_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ZParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_ZDelta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_ZNumberPoints_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        XYZContainer.add(ZParameters);
        XYZContainer.add(filler2);

        GridCoordinateContainer.add(XYZContainer);

        DeltaPointContainer.setToolTipText("");

        NICS_Grid_buttonGroup.add(NICS_Grid_ByPoints_RadioButton);
        NICS_Grid_ByPoints_RadioButton.setText(" Interval By Points");
        NICS_Grid_ByPoints_RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_ByPoints_RadioButtonNICS_Scan_IntervalByPoint_Radio_Action(evt);
            }
        });

        NICS_Grid_buttonGroup.add(NICS_Grid_ByDelta_RadioButton);
        NICS_Grid_ByDelta_RadioButton.setSelected(true);
        NICS_Grid_ByDelta_RadioButton.setText(" Interval By Delta");
        NICS_Grid_ByDelta_RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_ByDelta_RadioButtonNICS_Scan_IntervelByDelta_Radio_Action(evt);
            }
        });

        javax.swing.GroupLayout DeltaPointContainerLayout = new javax.swing.GroupLayout(DeltaPointContainer);
        DeltaPointContainer.setLayout(DeltaPointContainerLayout);
        DeltaPointContainerLayout.setHorizontalGroup(
            DeltaPointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeltaPointContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NICS_Grid_ByDelta_RadioButton)
                .addGap(25, 25, 25)
                .addComponent(NICS_Grid_ByPoints_RadioButton)
                .addGap(5, 5, 5))
        );
        DeltaPointContainerLayout.setVerticalGroup(
            DeltaPointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeltaPointContainerLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(DeltaPointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_ByPoints_RadioButton)
                    .addComponent(NICS_Grid_ByDelta_RadioButton))
                .addGap(0, 0, 0))
        );

        GridCoordinateContainer.add(DeltaPointContainer);
        GridCoordinateContainer.add(filler9);

        jPanel14.add(GridCoordinateContainer);
        jPanel14.add(filler40);

        PlaneDefinitionContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plane Definition", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        PlaneDefinitionContainer.setPreferredSize(new java.awt.Dimension(1186, 150));
        PlaneDefinitionContainer.setLayout(new javax.swing.BoxLayout(PlaneDefinitionContainer, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel4.setMinimumSize(new java.awt.Dimension(308, 84));
        jPanel4.setName(""); // NOI18N

        NICS_Grid_dialog_clearAtomButton.setText("Clear");
        NICS_Grid_dialog_clearAtomButton.setEnabled(false);
        NICS_Grid_dialog_clearAtomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NICS_Grid_dialog_clearAtomButton.setMaximumSize(new java.awt.Dimension(100, 20));
        NICS_Grid_dialog_clearAtomButton.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS_Grid_dialog_clearAtomButton.setPreferredSize(new java.awt.Dimension(100, 20));
        NICS_Grid_dialog_clearAtomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_dialog_clearAtomButtonActionPerformed(evt);
            }
        });

        NICS_Grid_AtomSelection_buttonGroup.add(NICS_Grid_By_Atom_Specified_Plane_Radio);
        NICS_Grid_By_Atom_Specified_Plane_Radio.setSelected(true);
        NICS_Grid_By_Atom_Specified_Plane_Radio.setText("Atom Plane Coordinate Grid");
        NICS_Grid_By_Atom_Specified_Plane_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_By_Atom_Specified_Plane_RadioActionPerformed(evt);
            }
        });

        NICS_Grid_dialog_textField.setEditable(false);
        NICS_Grid_dialog_textField.setBackground(new java.awt.Color(255, 0, 0));
        NICS_Grid_dialog_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_dialog_textField.setText("Define Plane");
        NICS_Grid_dialog_textField.setMinimumSize(new java.awt.Dimension(100, 20));
        NICS_Grid_dialog_textField.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("<html><font color=\"red\"><b>X</b></font> Center");
        jLabel16.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel16.setName(""); // NOI18N
        jLabel16.setPreferredSize(new java.awt.Dimension(58, 20));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("<html><font color=\"green\"><b>Y</b></font> Center");
        jLabel17.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel17.setName(""); // NOI18N
        jLabel17.setPreferredSize(new java.awt.Dimension(58, 20));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("<html><font color=\"green\"><b>Y</b></font> Center");
        jLabel18.setMinimumSize(new java.awt.Dimension(58, 20));
        jLabel18.setName(""); // NOI18N
        jLabel18.setPreferredSize(new java.awt.Dimension(58, 20));

        NICS_Grid_AtomSelection_buttonGroup.add(NICS_Grid_By_Global_Coordinate_Plane_Radio);
        NICS_Grid_By_Global_Coordinate_Plane_Radio.setText("Global Coordinate Grid");
        NICS_Grid_By_Global_Coordinate_Plane_Radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_By_Global_Coordinate_Plane_RadioActionPerformed(evt);
            }
        });

        NICS_Grid_YExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_YExternal_Text.setText("0.0");
        NICS_Grid_YExternal_Text.setEnabled(false);
        NICS_Grid_YExternal_Text.setMaximumSize(new java.awt.Dimension(121, 39));
        NICS_Grid_YExternal_Text.setMinimumSize(new java.awt.Dimension(121, 39));
        NICS_Grid_YExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Grid_YExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_External_Grid_Focus_Lost(evt);
            }
        });
        NICS_Grid_YExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_External_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_XExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_XExternal_Text.setText("0.0");
        NICS_Grid_XExternal_Text.setEnabled(false);
        NICS_Grid_XExternal_Text.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Grid_XExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Grid_XExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_External_Grid_Focus_Lost(evt);
            }
        });
        NICS_Grid_XExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_External_Grid_Text_Action_Performed(evt);
            }
        });

        NICS_Grid_ZExternal_Text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_ZExternal_Text.setText("0.0");
        NICS_Grid_ZExternal_Text.setEnabled(false);
        NICS_Grid_ZExternal_Text.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Grid_ZExternal_Text.setName(""); // NOI18N
        NICS_Grid_ZExternal_Text.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Grid_ZExternal_Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_External_Grid_Focus_Lost(evt);
            }
        });
        NICS_Grid_ZExternal_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_External_Grid_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NICS_Grid_dialog_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NICS_Grid_dialog_clearAtomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NICS_Grid_XExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NICS_Grid_YExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NICS_Grid_ZExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(NICS_Grid_By_Atom_Specified_Plane_Radio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NICS_Grid_By_Global_Coordinate_Plane_Radio)))
                .addGap(10, 10, 10))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_dialog_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_YExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_dialog_clearAtomButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_XExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_ZExternal_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NICS_Grid_By_Atom_Specified_Plane_Radio)
                    .addComponent(NICS_Grid_By_Global_Coordinate_Plane_Radio)))
        );

        PlaneDefinitionContainer.add(jPanel4);
        PlaneDefinitionContainer.add(filler8);

        jPanel14.add(PlaneDefinitionContainer);
        jPanel14.add(filler39);

        PolarAngleContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grid Polar Angle", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        PolarAngleContainer.setMinimumSize(new java.awt.Dimension(500, 99));
        PolarAngleContainer.setPreferredSize(new java.awt.Dimension(500, 99));
        PolarAngleContainer.setLayout(new javax.swing.BoxLayout(PolarAngleContainer, javax.swing.BoxLayout.Y_AXIS));
        PolarAngleContainer.add(filler6);

        jPanel1.setMinimumSize(new java.awt.Dimension(128, 76));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(303, 98));
        jPanel1.setVerifyInputWhenFocusTarget(false);
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(filler26);

        PhiContainer.setMinimumSize(new java.awt.Dimension(78, 76));
        PhiContainer.setPreferredSize(new java.awt.Dimension(78, 76));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>&Phi<br><center>(degrees)");
        jLabel2.setAlignmentX(0.5F);

        NICS_Grid_Phi_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Phi_textField.setText("0.0");
        NICS_Grid_Phi_textField.setAlignmentY(1.0F);
        NICS_Grid_Phi_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Grid_Phi_textField.setName(""); // NOI18N
        NICS_Grid_Phi_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Grid_Phi_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_Phi_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout PhiContainerLayout = new javax.swing.GroupLayout(PhiContainer);
        PhiContainer.setLayout(PhiContainerLayout);
        PhiContainerLayout.setHorizontalGroup(
            PhiContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PhiContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PhiContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_Phi_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        PhiContainerLayout.setVerticalGroup(
            PhiContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PhiContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NICS_Grid_Phi_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(PhiContainer);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Y_50.png"))); // NOI18N
        jPanel1.add(jLabel13);
        jPanel1.add(filler25);

        ThetaContainer.setMinimumSize(new java.awt.Dimension(78, 76));
        ThetaContainer.setOpaque(false);
        ThetaContainer.setPreferredSize(new java.awt.Dimension(78, 76));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html><center>&Theta<br><center>(degrees)");
        jLabel1.setToolTipText("");
        jLabel1.setAlignmentX(0.5F);

        NICS_Grid_Theta_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NICS_Grid_Theta_textField.setText("0.0");
        NICS_Grid_Theta_textField.setAlignmentY(1.0F);
        NICS_Grid_Theta_textField.setMinimumSize(new java.awt.Dimension(58, 20));
        NICS_Grid_Theta_textField.setPreferredSize(new java.awt.Dimension(58, 20));
        NICS_Grid_Theta_textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                NICS_Grid_Text_Focus_Lost(evt);
            }
        });
        NICS_Grid_Theta_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Text_Action_Performed(evt);
            }
        });

        javax.swing.GroupLayout ThetaContainerLayout = new javax.swing.GroupLayout(ThetaContainer);
        ThetaContainer.setLayout(ThetaContainerLayout);
        ThetaContainerLayout.setHorizontalGroup(
            ThetaContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThetaContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ThetaContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NICS_Grid_Theta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        ThetaContainerLayout.setVerticalGroup(
            ThetaContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ThetaContainerLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NICS_Grid_Theta_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(ThetaContainer);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Z_50.png"))); // NOI18N
        jLabel12.setToolTipText("");
        jPanel1.add(jLabel12);
        jPanel1.add(filler24);

        PolarAngleContainer.add(jPanel1);

        jPanel14.add(PolarAngleContainer);
        jPanel14.add(filler38);

        jPanel5.setMaximumSize(new java.awt.Dimension(500, 30));
        jPanel5.setMinimumSize(new java.awt.Dimension(500, 30));
        jPanel5.setPreferredSize(new java.awt.Dimension(500, 52));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));
        jPanel5.add(filler36);

        NICS_Grid_dialog_clearParameterButton.setText("Clear");
        NICS_Grid_dialog_clearParameterButton.setEnabled(false);
        NICS_Grid_dialog_clearParameterButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_clearParameterButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_clearParameterButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_clearParameterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_dialog_clearParameterButtonActionPerformed(evt);
            }
        });
        jPanel5.add(NICS_Grid_dialog_clearParameterButton);
        jPanel5.add(filler35);

        NICS_Grid_Quit_Button.setText("Quit");
        NICS_Grid_Quit_Button.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_Quit_Button.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_Quit_Button.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Grid_Quit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_Quit_ButtonActionPerformed(evt);
            }
        });
        jPanel5.add(NICS_Grid_Quit_Button);
        jPanel5.add(filler34);

        NICS_Grid_dialog_saveButton.setText("Save");
        NICS_Grid_dialog_saveButton.setEnabled(false);
        NICS_Grid_dialog_saveButton.setMaximumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_saveButton.setMinimumSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_saveButton.setName(""); // NOI18N
        NICS_Grid_dialog_saveButton.setPreferredSize(new java.awt.Dimension(113, 23));
        NICS_Grid_dialog_saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_dialog_saveButtonActionPerformed(evt);
            }
        });
        jPanel5.add(NICS_Grid_dialog_saveButton);
        jPanel5.add(filler33);

        NICS_Grid_dialog_saveReturnButton.setText("Save and Return");
        NICS_Grid_dialog_saveReturnButton.setEnabled(false);
        NICS_Grid_dialog_saveReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICS_Grid_dialog_saveReturnButtonActionPerformed(evt);
            }
        });
        jPanel5.add(NICS_Grid_dialog_saveReturnButton);
        jPanel5.add(filler32);

        jPanel14.add(jPanel5);
        jPanel14.add(filler37);

        NICS_Grid_dialog.getContentPane().add(jPanel14);
        NICS_Grid_dialog.getContentPane().add(filler11);

        FileChooserSaveOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Write Options", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        FileChooserSaveOptions.setMaximumSize(new java.awt.Dimension(140, 160));
        FileChooserSaveOptions.setMinimumSize(new java.awt.Dimension(140, 160));
        FileChooserSaveOptions.setOpaque(false);
        FileChooserSaveOptions.setPreferredSize(new java.awt.Dimension(140, 160));
        FileChooserSaveOptions.setLayout(new javax.swing.BoxLayout(FileChooserSaveOptions, javax.swing.BoxLayout.LINE_AXIS));
        FileChooserSaveOptions.add(filler71);

        jPanel21.setMaximumSize(new java.awt.Dimension(120, 130));
        jPanel21.setMinimumSize(new java.awt.Dimension(120, 130));
        jPanel21.setPreferredSize(new java.awt.Dimension(120, 130));
        jPanel21.setLayout(new javax.swing.BoxLayout(jPanel21, javax.swing.BoxLayout.Y_AXIS));
        jPanel21.add(filler69);

        jLabel19.setText("Ghost Atom Label");
        jLabel19.setAlignmentX(0.5F);
        jPanel21.add(jLabel19);
        jPanel21.add(filler68);

        GhostAtomNameSelected.setText("Bq");
        GhostAtomNameSelected.setMaximumSize(new java.awt.Dimension(75, 20));
        GhostAtomNameSelected.setMinimumSize(new java.awt.Dimension(75, 20));
        GhostAtomNameSelected.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel21.add(GhostAtomNameSelected);
        jPanel21.add(filler67);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(100, 35));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(100, 35));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 35));

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Bq", "q", "x" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jList1.setMaximumSize(new java.awt.Dimension(75, 70));
        jList1.setMinimumSize(new java.awt.Dimension(75, 70));
        jList1.setPreferredSize(new java.awt.Dimension(75, 70));
        jScrollPane2.setViewportView(jList1);

        jPanel21.add(jScrollPane2);
        jPanel21.add(filler66);

        IncludeMolecule.setText("<html>Include<br> Molecule");
        IncludeMolecule.setAlignmentX(0.5F);
        IncludeMolecule.setEnabled(false);
        IncludeMolecule.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IncludeMolecule.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        IncludeMolecule.setMaximumSize(new java.awt.Dimension(70, 37));
        IncludeMolecule.setMinimumSize(new java.awt.Dimension(70, 37));
        IncludeMolecule.setName(""); // NOI18N
        IncludeMolecule.setPreferredSize(new java.awt.Dimension(70, 37));
        IncludeMolecule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncludeMoleculeActionPerformed(evt);
            }
        });
        jPanel21.add(IncludeMolecule);
        jPanel21.add(filler72);

        FileChooserSaveOptions.add(jPanel21);
        FileChooserSaveOptions.add(filler70);

        BlankPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        BlankPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout BlankPanelLayout = new javax.swing.GroupLayout(BlankPanel);
        BlankPanel.setLayout(BlankPanelLayout);
        BlankPanelLayout.setHorizontalGroup(
            BlankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        BlankPanelLayout.setVerticalGroup(
            BlankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ghastly Version 0.1");

        jTextAreaCompletedCalculation.setEditable(false);
        jTextAreaCompletedCalculation.setColumns(20);
        jTextAreaCompletedCalculation.setRows(5);
        jTextAreaCompletedCalculation.setText("No Calculations performed yet!");
        jScrollPane1.setViewportView(jTextAreaCompletedCalculation);

        FileMenu.setText("File");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        CloseMenu.setText("Open");
        CloseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseMenuActionPerformed(evt);
            }
        });
        FileMenu.add(CloseMenu);

        jMenuItem2.setText("Close");
        FileMenu.add(jMenuItem2);

        ExitMenu.setText("Exit");
        ExitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenu);

        MainMenu.add(FileMenu);

        GhostAtomMenu.setText("Ghost Atom");
        GhostAtomMenu.setEnabled(false);

        NewGhostAtom.setText("New");
        NewGhostAtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGhostAtomActionPerformed(evt);
            }
        });
        GhostAtomMenu.add(NewGhostAtom);

        ClearGhostAtom.setText("Clear");
        GhostAtomMenu.add(ClearGhostAtom);

        SaveGhostAtom.setText("Save");
        SaveGhostAtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveGhostAtomActionPerformed(evt);
            }
        });
        GhostAtomMenu.add(SaveGhostAtom);

        MainMenu.add(GhostAtomMenu);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseMenuActionPerformed
        FileChooser.setDialogTitle("Open Molecular Coordinate File");
        FileChooser.resetChoosableFileFilters();
        FileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Gaussian input file (.com)", "com"));  
        FileChooser.addChoosableFileFilter(new FileNameExtensionFilter("xyz (.xyz) file", "xyz"));
        FileChooser.addChoosableFileFilter(new FileNameExtensionFilter("mdl (.mol) file", "mol"));
        FileChooser.addChoosableFileFilter(new FileNameExtensionFilter("tripos (.mol2) file", "mol2"));
        FileChooser.addChoosableFileFilter(new FileNameExtensionFilter("protein databank (.pdb) file", "pdb"));
        FileChooser.setAcceptAllFileFilterUsed(false);
        //setFileFilter(filter);
        FileChooser.setAccessory(BlankPanel);
        
        int result = FileChooser.showOpenDialog(this);
	if(result == JFileChooser.CANCEL_OPTION) return;
	try {
		File file = FileChooser.getSelectedFile();
		//java.net.URL url = file.toURI().toURL();
                
               
                
		moleculeData = new FileReading(file, FileChooser.getTypeDescription(file));
		if(moleculeData != null){
			moleculeDataLoaded = true;
			
			molecule.PassInterfaceParameters(moleculeData.AtomicCoordinates(false), moleculeData.BondArray(), moleculeData.BondGeometry(false), Ghastly, GhastlyLock);			
                        
                        GhostAtomMenu.setEnabled(true);
                        
		}
 		return;
		
	}
	catch (Exception e) {
		
		return;
	}
    }//GEN-LAST:event_CloseMenuActionPerformed

    private void NewGhostAtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGhostAtomActionPerformed
        GhostAtomForm.setVisible(true);
    }//GEN-LAST:event_NewGhostAtomActionPerformed

    private void Main_Menu_return_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Main_Menu_return_buttonActionPerformed
         GhostAtomForm.setVisible(false);
         
         //jTextAreaCompletedCalculation.setText(Ghastly.GetGhostAtomString());
         
    }//GEN-LAST:event_Main_Menu_return_buttonActionPerformed

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_FileMenuActionPerformed

    private void AddNewGhostAtomTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewGhostAtomTypeActionPerformed
        // TODO add your handling code here:
        String GhostComboType = (String)ComboBoxGhostType.getSelectedItem();
        
        if(GhostComboType.equals("NICS(0)")){
            synchronized(GhastlyLock){
                Ghastly.LockSelection=false;
                AddNewGhostAtomType.setEnabled(false);
                Main_Menu_return_button.setEnabled(false);
                NICSO_dialog.setVisible(true);
                NICS0 = true;     
            }
        }else if(GhostComboType.equals("NICS(1)")){
            synchronized(GhastlyLock){
                Ghastly.LockSelection=false;
                AddNewGhostAtomType.setEnabled(false);
                Main_Menu_return_button.setEnabled(false);
                NICS1_dialog.setVisible(true);
                NICS1 = true;
            }
        }else if(GhostComboType.equals("NICS-scan")){
            synchronized(GhastlyLock){
                Ghastly.LockSelection=false;
                AddNewGhostAtomType.setEnabled(false);
                Main_Menu_return_button.setEnabled(false);
                NICS_Scan_dialog.setVisible(true);
                NICSSCAN = true;
            }
        }else if(GhostComboType.equals("NICS-grid")){
            synchronized(GhastlyLock){
                Ghastly.LockSelection=false;
                AddNewGhostAtomType.setEnabled(false);
                Main_Menu_return_button.setEnabled(false);
                NICS_Grid_dialog.setVisible(true);
                NICSGRID = true;
            }
        }
        
    }//GEN-LAST:event_AddNewGhostAtomTypeActionPerformed

     // buttons to change when a observable value changes
    // in this case, worried about the plane being defined or not 
    // for the ghost atom calculations
    @Override
    public void update(Observable o, Object arg){
        // what to do if no plane
        
        if(!Ghastly.PlaneCalculated()){
            
            if(NICS0)NICS0_dialog_textField.setText("Define Plane");                
            if(NICS1)NICS1_dialog_textField.setText("Define Plane");
            if(NICSSCAN)NICS_Scan_dialog_textField.setText("Define Plane");
            if(NICSGRID)NICS_Grid_dialog_textField.setText("Define Plane");
            
            if(NICS0){
                NICS_0_Calculate_Release();
                NICS0_dialog_textField.setBackground(Color.RED);
            }
            if(NICS1){
                NICS_1_Calculate_Release();
                NICS1_dialog_textField.setBackground(Color.RED);
                NICS1_dialog_ChoosePlane.setEnabled(false);
            };

            if(NICSSCAN){
                NICS_Scan_Calculate_Release();
                if(!GlobalCoordinateScan)NICS_Scan_dialog_textField.setBackground(Color.RED);
            }                           
            if(NICSGRID){
                NICS_Grid_Calculate_Release();              
                if(!GlobalCoordinateGrid)NICS_Grid_dialog_textField.setBackground(Color.RED);                                
            }
       
             jTextAreaCompletedCalculation.setText("");
             
        // what to do if a plane is there
        }else{
            
            if(NICS0)NICS0_dialog_textField.setText("Plane Defined");
            if(NICS1)NICS1_dialog_textField.setText("Plane Defined");
            if(NICSSCAN)NICS_Scan_dialog_textField.setText("Plane Defined");
            if(NICSGRID)NICS_Grid_dialog_textField.setText("Plane Defined");
            
            if(NICS0){
                NICS_0_Calculate();
                NICS0_dialog_textField.setBackground(Color.GREEN);
            }
            if(NICS1){
                NICS1_dialog_textField.setBackground(Color.GREEN);
                NICS_1_Calculate();                
                NICS1_dialog_ChoosePlane.setEnabled(true);
            };
            
            
             if(NICSSCAN){             
                if(NICS_Scan_ByPoints_RadioButton.isSelected()){
                    NICS_Scan_NumberPoints_Calculate();
                }else{
                    NICS_Scan_Delta_Calculate(); 
                }
                if(!GlobalCoordinateScan)NICS_Scan_dialog_textField.setBackground(Color.GREEN);
            }    
            if(NICSGRID){
                if(NICS_Grid_ByPoints_RadioButton.isSelected()){
                    NICS_Grid_NumberPoints_Calculate();
                }else{
                    NICS_Grid_Delta_Calculate();
                }
               
                if(!GlobalCoordinateGrid)NICS_Grid_dialog_textField.setBackground(Color.GREEN);    
            }
            
            jTextAreaCompletedCalculation.setText(Ghastly.GetPlaneNormal());
        }
    }
    
    
    
    
    private void ComboBoxGhostTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxGhostTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxGhostTypeActionPerformed

    private void NICS0_dialog_cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_cancelButtonActionPerformed
                
        // make sure no atoms are saved
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = true;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();       
            NICS0_dialog_clearButton.setEnabled(false);
            NICS0_dialog_saveReturnButton.setEnabled(false);
            NICS0_dialog_saveButton.setEnabled(false);
            
            Main_Menu_return_button.setEnabled(true);
            AddNewGhostAtomType.setEnabled(true);
            NICSO_dialog.setVisible(false);
            NICS0=false;
        }
    }//GEN-LAST:event_NICS0_dialog_cancelButtonActionPerformed

    private void NICS0_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            
            NICS0_dialog_clearButton.setEnabled(false);
            NICS0_dialog_saveReturnButton.setEnabled(false);
            NICS0_dialog_saveButton.setEnabled(false);
            NICS0=false;
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS(0)", new Integer(1),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();
            /*
            // all this gobledygook just to center integers and strings in the table, needs to be somewhere else probably
            DefaultTableCellRenderer Renderer = new DefaultTableCellRenderer();
            Renderer.setHorizontalAlignment(JLabel.CENTER);
            GhostAtomTable.setDefaultRenderer(String.class, Renderer);
            GhostAtomTable.setDefaultRenderer(Integer.class, Renderer);
            */
            model.addRow(NewRow);
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICSO_dialog.setVisible(false);
            NICS0 = false;
        }
    }//GEN-LAST:event_NICS0_dialog_saveReturnButtonActionPerformed

    private void NICS0_dialog_clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_clearButtonActionPerformed
        NICS_0_Calculate_Release();             
    }//GEN-LAST:event_NICS0_dialog_clearButtonActionPerformed

    private void ExitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuActionPerformed
        // TODO add your handling code here:       
        System.exit(0);
    }//GEN-LAST:event_ExitMenuActionPerformed

    private void GhostAtomTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_GhostAtomTablePropertyChange
        // TODO add your handling code here:
        // don't need this
    }//GEN-LAST:event_GhostAtomTablePropertyChange

    private void GhostAtomTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GhostAtomTableMousePressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_GhostAtomTableMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        //go through the table, look for a row to delete
        // resetting the for loop for each deletion (table size decreases)
        synchronized(GhastlyLock){
            boolean DoneDeleting = false;
            while(!DoneDeleting){
                for(int itor = 0; itor < GhostAtomTable.getRowCount(); itor++){
                    // see if the last column is asking for a deletion
                    if((boolean)GhostAtomTable.getModel().getValueAt(itor, 4)){
                        // remove from data structure
                        Ghastly.RemoveType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                        // delete row from the table
                        DefaultTableModel TempRowDelete = (DefaultTableModel)GhostAtomTable.getModel();
                        TempRowDelete.removeRow(itor);
                        break;
                    }
                    if(itor == (GhostAtomTable.getRowCount() - 1))DoneDeleting = true;

                   // edge case, deleted all
                    if(GhostAtomTable.getRowCount() == 0)DoneDeleting = true;
                }
                //edge case, deleted all
                if(GhostAtomTable.getRowCount() == 0)DoneDeleting = true;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void NICS0_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_saveButtonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = false;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
           
            NICS0_dialog_clearButton.setEnabled(false);
            NICS0_dialog_saveReturnButton.setEnabled(false);
            NICS0_dialog_saveButton.setEnabled(false);
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS(0)", new Integer(1),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
            model.addRow(NewRow);
        }
    }//GEN-LAST:event_NICS0_dialog_saveButtonActionPerformed

    private void NICS1_dialog_cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_cancelButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = true;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();       
            NICS1_dialog_clearButton.setEnabled(false);
            NICS1_dialog_saveReturnButton.setEnabled(false);
            NICS1_dialog_saveButton.setEnabled(false);
           
            NICS1_dialog_ChoosePlane.setEnabled(false);
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICS1_dialog.setVisible(false);
            NICS1=false;
        }
    }//GEN-LAST:event_NICS1_dialog_cancelButtonActionPerformed

    private void NICS1_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
         
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            
            NICS1_dialog_ChoosePlane.setEnabled(false);
            NICS1_dialog_clearButton.setEnabled(false);
            NICS1_dialog_saveReturnButton.setEnabled(false);
            NICS1_dialog_saveButton.setEnabled(false);
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS(1)", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
            model.addRow(NewRow);
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICS1_dialog.setVisible(false);
            NICS1=false;
        }
    }//GEN-LAST:event_NICS1_dialog_saveReturnButtonActionPerformed

    private void NICS1_dialog_clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_clearButtonActionPerformed
        NICS_1_Calculate_Release();
            
    }//GEN-LAST:event_NICS1_dialog_clearButtonActionPerformed

    private void NICS1_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_saveButtonActionPerformed
        
        //transfer proposed to full atom list
        // undo selection display mode
        // unlock selection
        // reenable calculate button (plane still selected)
        // unselect all selected atoms
        // and disable clear button as well as save button
        // finally quite whole dialog
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = false;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            
            NICS1_dialog_ChoosePlane.setEnabled(false);
            NICS1_dialog_clearButton.setEnabled(false);
            NICS1_dialog_saveReturnButton.setEnabled(false);
            NICS1_dialog_saveButton.setEnabled(false);
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS(1)", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
            model.addRow(NewRow);
        }
    }//GEN-LAST:event_NICS1_dialog_saveButtonActionPerformed

    private void GhostAtomTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GhostAtomTableMouseReleased
        // TODO add your handling code here:
         // check to see if a highlight changed or not when the mouse is pressed in the table
       
        tempclickcounter++;
        synchronized(GhastlyLock){
            ((AbstractTableModel)GhostAtomTable.getModel()).fireTableDataChanged();
            // check for highlighting in the table and set the flag of all 
            for(int itor = 0; itor < GhostAtomTable.getRowCount(); itor++){
                // see if the table is asking for highlighting
                
                if((boolean)GhostAtomTable.getModel().getValueAt(itor, 3)){
                    if(!(boolean)Ghastly.IsHighlighted((Integer)GhostAtomTable.getModel().getValueAt(itor, 0))){
                         Ghastly.HighlightType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                    };

                }else{
                    Ghastly.UnHighlightType((Integer)GhostAtomTable.getModel().getValueAt(itor, 0));
                }                       
            }
        }
        
        
    }//GEN-LAST:event_GhostAtomTableMouseReleased

    private void NICS1_dialog_ChoosePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS1_dialog_ChoosePlaneActionPerformed
        if(Ghastly.PlaneCalculated())NICS_1_Calculate();
    }//GEN-LAST:event_NICS1_dialog_ChoosePlaneActionPerformed

    private void NICS_Scan_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_dialog_saveButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = false;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            // clear proposed in memory
            Ghastly.ExcludeProposed();
            if(!GlobalCoordinateScan)NICS_Scan_dialog_textField.setBackground(Color.RED); 
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS SCAN", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
            model.addRow(NewRow);
        }
    }//GEN-LAST:event_NICS_Scan_dialog_saveButtonActionPerformed

    private void NICS_Scan_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();        
            Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            // clear proposed in memory
            Ghastly.ExcludeProposed();           
            // settings associated with the plane to reset to default
            NICS_Scan_dialog_textField.setBackground(Color.RED);              
            NICS_Scan_XExternal_Text.setEnabled(false);
            NICS_Scan_XExternal_Text.setText("0.0");
            NICS_Scan_YExternal_Text.setEnabled(false);
            NICS_Scan_YExternal_Text.setText("0.0");
            NICS_Scan_ZExternal_Text.setEnabled(false);
            NICS_Scan_ZExternal_Text.setText("0.0");
            // reset radio buttons on plane option and plane flag
            NICS_Scan_By_Global_Coordinate_Plane_Radio.setSelected(false);
            NICS_Scan_By_Atom_Specified_Plane_Radio.setSelected(true);
            GlobalCoordinateScan = false;
            
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);
            
            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS SCAN", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();        
            model.addRow(NewRow);
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICS_Scan_dialog.setVisible(false);
            NICSSCAN=false;
        }                        
    }//GEN-LAST:event_NICS_Scan_dialog_saveReturnButtonActionPerformed

    private void NICS0_dialog_textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS0_dialog_textFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NICS0_dialog_textFieldActionPerformed

    private void NICS_Scan_Quit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_Quit_ButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = true;
            Ghastly.UnselectAtoms = true;            
            Ghastly.ExcludeProposed();
            // settings associated with the plane to reset to default
            NICS_Scan_dialog_textField.setBackground(Color.RED);              
            NICS_Scan_XExternal_Text.setEnabled(false);
            NICS_Scan_XExternal_Text.setText("0.0");
            NICS_Scan_YExternal_Text.setEnabled(false);
            NICS_Scan_YExternal_Text.setText("0.0");
            NICS_Scan_ZExternal_Text.setEnabled(false);
            NICS_Scan_ZExternal_Text.setText("0.0");
            // reset radio buttons on plane option
            NICS_Scan_By_Global_Coordinate_Plane_Radio.setSelected(false);
            NICS_Scan_By_Atom_Specified_Plane_Radio.setSelected(true);
            GlobalCoordinateScan = false;
            if(Ghastly.PlaneCalculated())Ghastly.ClearPlanePoints();
            // setting associated with buttons in *this* window
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);                                
            NICS_Scan_dialog.setVisible(false);
            
            // settings for previous calling window
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICSSCAN=false;
        }
    }//GEN-LAST:event_NICS_Scan_Quit_ButtonActionPerformed

    private void NICS_Scan_dialog_clearAtomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_dialog_clearAtomButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();
            if(!GlobalCoordinateScan)NICS_Scan_dialog_textField.setBackground(Color.RED);  
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);    
        }
    }//GEN-LAST:event_NICS_Scan_dialog_clearAtomButtonActionPerformed

    private void NICS_Scan_Text_Focus_Lost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NICS_Scan_Text_Focus_Lost
        // pick operation based on number of points or delta, can't operate with both simultaneously
        // and one will be adjusted with respect ot the other
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Scan_NumberPoints_Calculate();
        }else{
            NICS_Scan_Delta_Calculate(); 
        }                                  
    }//GEN-LAST:event_NICS_Scan_Text_Focus_Lost

    private void NICS_Scan_dialog_clearParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_dialog_clearParameterButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){    
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;      
            NICS_Scan_MinRange_textField.setText("0.0");
            NICS_Scan_MaxRange_textField.setText("0.0");
            NICS_Scan_Delta_textField.setText("0.0");
            NICS_Scan_NumberPoints_textField.setText("");
            NICS_Scan_Theta_textField.setText("0.0");
            NICS_Scan_Phi_textField.setText("0.0");               
            Ghastly.ExcludeProposed();
            if(!GlobalCoordinateScan)NICS_Scan_dialog_textField.setBackground(Color.RED);  
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);                                               
            
        }
    }//GEN-LAST:event_NICS_Scan_dialog_clearParameterButtonActionPerformed

    private void NICS_Scan_Text_Action_Performed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_Text_Action_Performed
        // pick operation based on number of points or delta, can't operate with both simultaneously
        // and one will be adjusted with respect ot the other
        
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Scan_NumberPoints_Calculate();
        }else{
            NICS_Scan_Delta_Calculate(); 
        }
        
        
    }//GEN-LAST:event_NICS_Scan_Text_Action_Performed

    private void NICS_Scan_IntervalByPoint_Radio_Action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_IntervalByPoint_Radio_Action
        // TODO add your handling code here:
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Scan_Delta_textField.setEnabled(false);
            NICS_Scan_NumberPoints_textField.setEnabled(true);
        }
    }//GEN-LAST:event_NICS_Scan_IntervalByPoint_Radio_Action

    private void NICS_Scan_IntervelByDelta_Radio_Action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_IntervelByDelta_Radio_Action
        // TODO add your handling code here:
        if(NICS_Scan_ByDelta_jRadioButton.isSelected()){
            NICS_Scan_Delta_textField.setEnabled(true);
            NICS_Scan_NumberPoints_textField.setEnabled(false);
        }
    }//GEN-LAST:event_NICS_Scan_IntervelByDelta_Radio_Action

    private void SaveGhostAtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveGhostAtomActionPerformed
        String FileTypeFilter;                
        
        FileChooser.setDialogTitle("Save Ghost Atoms");
        // new files to read and write to
        FileChooser.resetChoosableFileFilters();
        // declare the new filters final so that a property change filter can read them
        final FileNameExtensionFilter TextFile = new FileNameExtensionFilter("Text File (.txt)", "txt");        
        final FileNameExtensionFilter CSVFile = new FileNameExtensionFilter("Comma Separated Value File (.csv) file", "csv");
        final FileNameExtensionFilter GhastlyFile = new FileNameExtensionFilter("Ghastly File (.gst)", "gst");
        final FileNameExtensionFilter Mol2File = new FileNameExtensionFilter("tripos (.mol2)", "mol2");
        final FileNameExtensionFilter MolFile = new FileNameExtensionFilter("MDL File (.mol)", "mol");
        final FileNameExtensionFilter PDBFile = new FileNameExtensionFilter("Protein Databank file (.pdb)", "pdb");
        final FileNameExtensionFilter XYZFile = new FileNameExtensionFilter("XYZ file (.xyz)", "xyz");
        // add new file filters
        FileChooser.addChoosableFileFilter(TextFile);  
        FileChooser.addChoosableFileFilter(CSVFile);
        FileChooser.addChoosableFileFilter(GhastlyFile);
        FileChooser.addChoosableFileFilter(Mol2File);
        FileChooser.addChoosableFileFilter(MolFile);
        FileChooser.addChoosableFileFilter(PDBFile);
        FileChooser.addChoosableFileFilter(XYZFile);
        FileChooser.setAcceptAllFileFilterUsed(false);
        
        // for changing the state of the "include molecule" toggle button when the file type changes
        PropertyChangeListener FileFilterListener = new PropertyChangeListener(){
             
             @Override
            public void propertyChange(PropertyChangeEvent e) {
                if(FileChooser.getFileFilter().equals(TextFile)){
                    IncludeMolecule.setEnabled(false);
                }else if(FileChooser.getFileFilter().equals(CSVFile)){
                    IncludeMolecule.setEnabled(false);
                }else if(FileChooser.getFileFilter().equals(GhastlyFile)){
                    IncludeMolecule.setEnabled(false);
                }else if(FileChooser.getFileFilter().equals(Mol2File)){
                    IncludeMolecule.setEnabled(true);
                }else if(FileChooser.getFileFilter().equals(MolFile)){
                    IncludeMolecule.setEnabled(true);
                }else if(FileChooser.getFileFilter().equals(PDBFile)){  
                    IncludeMolecule.setEnabled(true);
                }else if(FileChooser.getFileFilter().equals(XYZFile)){
                    IncludeMolecule.setEnabled(true);
                }else{
                    
                }
            }
            
        };
        
        
        
        // when the file filter is changed, add a listener to grey out the "include molecule" section or not depending on the file
        // selected
        FileChooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, FileFilterListener);
        

        // add in the ghost atom properties panel        
        FileChooser.setAccessory(FileChooserSaveOptions);
        //FileChooser.addPropertyChangeListener(FileChooserSaveOptions);
        
        
        
        int result = FileChooser.showSaveDialog(this);
	if(result == JFileChooser.CANCEL_OPTION) return;
	try {     
                Path NewFilePath = FileChooser.getSelectedFile().toPath();
        
                //File SaveFile = FileChooser.getSelectedFile();
                //SaveFile.
                
                
                if(FileChooser.getFileFilter().equals(TextFile)){
                    FileTypeFilter = new String("txt");
                }else if(FileChooser.getFileFilter().equals(CSVFile)){
                    FileTypeFilter = new String("csv");
                }else if(FileChooser.getFileFilter().equals(GhastlyFile)){
                    FileTypeFilter = new String("gst");
                }else if(FileChooser.getFileFilter().equals(Mol2File)){
                    FileTypeFilter = new String("mol2");                                        
                }else if(FileChooser.getFileFilter().equals(MolFile)){
                    FileTypeFilter = new String("mol");
                }else if(FileChooser.getFileFilter().equals(PDBFile)){  
                    FileTypeFilter = new String("pdb");
                }else if(FileChooser.getFileFilter().equals(XYZFile)){
                    FileTypeFilter = new String("xyz");                      
                }else{
                    FileTypeFilter = new String("");
                }
                synchronized(GhastlyLock){
                    FileWriting.WriteAtomsToFile(NewFilePath, moleculeData, Ghastly, FileTypeFilter, GhostAtomNameSelected.getText(), IncludeMolecule.isSelected());                                                                 
                }
                // reset parameters
                IncludeMolecule.setEnabled(true);
                IncludeMolecule.setSelected(false);
                FileChooser.setAccessory(BlankPanel);
                FileChooser.removePropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, FileFilterListener);
                FileChooser.resetChoosableFileFilters();
                
 		return;
		
	}
	catch (Exception e) {
		System.out.println("In GhastlyGUI file writing error: " + e.getMessage());
                // reset parameters
                IncludeMolecule.setEnabled(true);
                IncludeMolecule.setSelected(false);                
                FileChooser.setAccessory(BlankPanel);
                FileChooser.removePropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, FileFilterListener);
                FileChooser.resetChoosableFileFilters();
                
		return;
	}
    }//GEN-LAST:event_SaveGhostAtomActionPerformed

    
    private void NICS_Scan_By_Global_Coordinate_Plane_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_By_Global_Coordinate_Plane_RadioActionPerformed
        
        if(NICS_Scan_By_Global_Coordinate_Plane_Radio.isSelected()){
            // enable the center XYZ points to be selected by the user
            NICS_Scan_XExternal_Text.setEnabled(true);
            NICS_Scan_XExternal_Text.setEditable(true);
            NICS_Scan_YExternal_Text.setEnabled(true);
            NICS_Scan_YExternal_Text.setEditable(true);
            NICS_Scan_ZExternal_Text.setEnabled(true);
            NICS_Scan_ZExternal_Text.setEditable(true);
            // turn off atom "Clear atom selection" button
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            // gray out selection indicator
            NICS_Scan_dialog_textField.setBackground(Color.GRAY);

            // get rid of previous grid
            synchronized(GhastlyLock){
                Ghastly.ExcludeProposed();
                // flag to unselect selected atoms
                Ghastly.UnselectAtoms = true;
                // don't allow atom selection
                Ghastly.LockSelection = true;
            }
            // flag that we are working from global coordinates
            GlobalCoordinateScan = true;
            // do a first pass calculation based on the user information already present
            if(NICS_Scan_ByPoints_RadioButton.isSelected()){
                NICS_Scan_NumberPoints_Calculate();
            }else{
                NICS_Scan_Delta_Calculate();
            }

        }
    }//GEN-LAST:event_NICS_Scan_By_Global_Coordinate_Plane_RadioActionPerformed

    private void NICS_Scan_By_Atom_Specified_Plane_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_By_Atom_Specified_Plane_RadioActionPerformed
       
        if(NICS_Scan_By_Atom_Specified_Plane_Radio.isSelected()){

            // disable the center XYZ points selected by the user
            NICS_Scan_XExternal_Text.setEnabled(false);
            NICS_Scan_YExternal_Text.setEnabled(false);
            NICS_Scan_ZExternal_Text.setEnabled(false);
            // don't need to enable the clear atom button, no grid should be selected
            //NICS_Grid_dialog_clearAtomButton.setEnabled(true);

            // flag that we are working from atomic coordinates
            GlobalCoordinateScan = false;

            synchronized(GhastlyLock){
                // exclude global coordinate grid proposed atoms
                Ghastly.ExcludeProposed();
                // flag to unselect selected atoms (which shouldn't be selected anyways
                    Ghastly.UnselectAtoms = true;
                    // allow atom selection
                    Ghastly.LockSelection = false;
                    // remove the plane automatically calculated by the
                    Ghastly.ClearPlanePoints();

                    // set plane indicatoion to red
                    NICS_Scan_dialog_textField.setBackground(Color.RED);

                }

                // do a first pass calculation based on the user information already present
                if(NICS_Scan_ByPoints_RadioButton.isSelected()){
                    NICS_Scan_NumberPoints_Calculate();
                }else{
                    NICS_Scan_Delta_Calculate();
                }

            }
        
        
    }//GEN-LAST:event_NICS_Scan_By_Atom_Specified_Plane_RadioActionPerformed

    private void NICS_Scan_External_Focus_Lost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NICS_Scan_External_Focus_Lost
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Scan_NumberPoints_Calculate();
        }else{
            NICS_Scan_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Scan_External_Focus_Lost

    private void NICS_Scan_External_Action_Performed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_External_Action_Performed
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Scan_NumberPoints_Calculate();
        }else{
            NICS_Scan_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Scan_External_Action_Performed

    private void NICS_Scan_dialog_textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Scan_dialog_textFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NICS_Scan_dialog_textFieldActionPerformed

    private void NICS_Grid_dialog_saveReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_dialog_saveReturnButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();
            Ghastly.ExcludeProposed();

            // settings associated with the plane to reset to default
            NICS_Grid_dialog_textField.setBackground(Color.RED);
            NICS_Grid_XExternal_Text.setEnabled(false);
            NICS_Grid_XExternal_Text.setText("0.0");
            NICS_Grid_YExternal_Text.setEnabled(false);
            NICS_Grid_YExternal_Text.setText("0.0");
            NICS_Grid_ZExternal_Text.setEnabled(false);
            NICS_Grid_ZExternal_Text.setText("0.0");
            // reset radio buttons on plane option and plane flag
            NICS_Grid_By_Global_Coordinate_Plane_Radio.setSelected(false);
            NICS_Grid_By_Atom_Specified_Plane_Radio.setSelected(true);
            GlobalCoordinateGrid = false;

            Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            NICS_Grid_dialog_clearParameterButton.setEnabled(false);
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            NICS_Grid_dialog_saveReturnButton.setEnabled(false);
            NICS_Grid_dialog_saveButton.setEnabled(false);

            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS GRID", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();
            model.addRow(NewRow);
            AddNewGhostAtomType.setEnabled(true);
            Main_Menu_return_button.setEnabled(true);
            NICS_Grid_dialog.setVisible(false);
            NICSGRID = false;
        }
    }//GEN-LAST:event_NICS_Grid_dialog_saveReturnButtonActionPerformed

    private void NICS_Grid_dialog_saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_dialog_saveButtonActionPerformed
        synchronized(GhastlyLock){
            TempIndex = Ghastly.AddProposed();
            Ghastly.ExcludeProposed();
            Ghastly.LockSelection = false;
            Ghastly.DisplayProposed = false;
            Ghastly.UnselectAtoms = true;
            if(!GlobalCoordinateGrid){
                Ghastly.UnselectAtoms = true;
                NICS_Grid_dialog_textField.setBackground(Color.RED);
            }
            NICS_Grid_dialog_clearParameterButton.setEnabled(false);
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            NICS_Grid_dialog_saveReturnButton.setEnabled(false);
            NICS_Grid_dialog_saveButton.setEnabled(false);

            // Add to the Ghost Atom Table

            Object[] NewRow = {TempIndex, "NICS GRID", Ghastly.GetAtomsInType(TempIndex),  new Boolean(false),  new Boolean (false)};
            DefaultTableModel model = (DefaultTableModel) GhostAtomTable.getModel();
            model.addRow(NewRow);
        }
    }//GEN-LAST:event_NICS_Grid_dialog_saveButtonActionPerformed

    private void NICS_Grid_Quit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_Quit_ButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false;
            Ghastly.LockSelection = true;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();
            // plane settings to reset when quitting
            NICS_Grid_dialog_textField.setBackground(Color.RED);
            NICS_Grid_XExternal_Text.setEnabled(false);
            NICS_Grid_XExternal_Text.setText("0.0");
            NICS_Grid_YExternal_Text.setEnabled(false);
            NICS_Grid_YExternal_Text.setText("0.0");
            NICS_Grid_ZExternal_Text.setEnabled(false);
            NICS_Grid_ZExternal_Text.setText("0.0");
            NICS_Grid_By_Global_Coordinate_Plane_Radio.setSelected(false);
            NICS_Grid_By_Atom_Specified_Plane_Radio.setSelected(true);
            GlobalCoordinateGrid = false;
            if(Ghastly.PlaneCalculated())Ghastly.ClearPlanePoints();

            NICS_Grid_dialog_clearParameterButton.setEnabled(false);
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            NICS_Grid_dialog_saveReturnButton.setEnabled(false);
            NICS_Grid_dialog_saveButton.setEnabled(false);
            NICS_Grid_dialog.setVisible(false);
            Main_Menu_return_button.setEnabled(true);
            AddNewGhostAtomType.setEnabled(true);
            NICSGRID=false;
        }
    }//GEN-LAST:event_NICS_Grid_Quit_ButtonActionPerformed

    private void NICS_Grid_dialog_clearParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_dialog_clearParameterButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false;
            Ghastly.LockSelection = false;
            NICS_Grid_XMinRange_textField.setText("0.0");
            NICS_Grid_XMaxRange_textField.setText("0.0");
            NICS_Grid_XDelta_textField.setText("0.0");
            NICS_Grid_XNumberPoints_textField.setText("");
            NICS_Grid_YMinRange_textField.setText("0.0");
            NICS_Grid_YMaxRange_textField.setText("0.0");
            NICS_Grid_YDelta_textField.setText("0.0");
            NICS_Grid_YNumberPoints_textField.setText("");
            NICS_Grid_ZMinRange_textField.setText("0.0");
            NICS_Grid_ZMaxRange_textField.setText("0.0");
            NICS_Grid_ZDelta_textField.setText("0.0");
            NICS_Grid_ZNumberPoints_textField.setText("");
            NICS_Grid_Theta_textField.setText("0.0");
            NICS_Grid_Phi_textField.setText("0.0");
            Ghastly.ExcludeProposed();
            if(!GlobalCoordinateGrid){
                Ghastly.UnselectAtoms = true;
                NICS_Grid_dialog_textField.setBackground(Color.RED);
            }
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);
        }
    }//GEN-LAST:event_NICS_Grid_dialog_clearParameterButtonActionPerformed

    private void NICS_Grid_Text_Action_Performed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_Text_Action_Performed
        // pick operation based on number of points or delta, can't operate with both simultaneously
        // and one will be adjusted with respect ot the other
        if(NICS_Grid_ByPoints_RadioButton.isSelected()){
            NICS_Grid_NumberPoints_Calculate();
        }else{
            NICS_Grid_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Grid_Text_Action_Performed

    private void NICS_Grid_Text_Focus_Lost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NICS_Grid_Text_Focus_Lost
        // pick operation based on number of points or delta, can't operate with both simultaneously
        // and one will be adjusted with respect ot the other
        if(NICS_Grid_ByPoints_RadioButton.isSelected()){
            NICS_Grid_NumberPoints_Calculate();
        }else{
            NICS_Grid_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Grid_Text_Focus_Lost

    private void NICS_Grid_External_Grid_Text_Action_Performed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_External_Grid_Text_Action_Performed
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Grid_NumberPoints_Calculate();
        }else{
            NICS_Grid_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Grid_External_Grid_Text_Action_Performed

    private void NICS_Grid_External_Grid_Focus_Lost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NICS_Grid_External_Grid_Focus_Lost
        if(NICS_Scan_ByPoints_RadioButton.isSelected()){
            NICS_Grid_NumberPoints_Calculate();
        }else{
            NICS_Grid_Delta_Calculate();
        }
    }//GEN-LAST:event_NICS_Grid_External_Grid_Focus_Lost

    private void NICS_Grid_By_Global_Coordinate_Plane_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_By_Global_Coordinate_Plane_RadioActionPerformed

        if(NICS_Grid_By_Global_Coordinate_Plane_Radio.isSelected()){
            // enable the center XYZ points to be selected by the user
            NICS_Grid_XExternal_Text.setEnabled(true);
            NICS_Grid_XExternal_Text.setEditable(true);
            NICS_Grid_YExternal_Text.setEnabled(true);
            NICS_Grid_YExternal_Text.setEditable(true);
            NICS_Grid_ZExternal_Text.setEnabled(true);
            NICS_Grid_ZExternal_Text.setEditable(true);
            // turn off atom "Clear atom selection" button
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            // gray out selection indicator
            NICS_Grid_dialog_textField.setBackground(Color.GRAY);

            // get rid of previous grid
            synchronized(GhastlyLock){
                Ghastly.ExcludeProposed();
                // flag to unselect selected atoms
                Ghastly.UnselectAtoms = true;
                // don't allow atom selection
                Ghastly.LockSelection = true;
            }
            // flag that we are working from global coordinates
            GlobalCoordinateGrid = true;
            // do a first pass calculation based on the user information already present
            if(NICS_Grid_ByPoints_RadioButton.isSelected()){
                NICS_Grid_NumberPoints_Calculate();
            }else{
                NICS_Grid_Delta_Calculate();
            }

        }
    }//GEN-LAST:event_NICS_Grid_By_Global_Coordinate_Plane_RadioActionPerformed

    private void NICS_Grid_By_Atom_Specified_Plane_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_By_Atom_Specified_Plane_RadioActionPerformed

        if(NICS_Grid_By_Atom_Specified_Plane_Radio.isSelected()){

            // disable the center XYZ points selected by the user
            NICS_Grid_XExternal_Text.setEnabled(false);
            NICS_Grid_YExternal_Text.setEnabled(false);
            NICS_Grid_ZExternal_Text.setEnabled(false);
            // don't need to enable the clear atom button, no grid should be selected
            //NICS_Grid_dialog_clearAtomButton.setEnabled(true);

            // flag that we are working from atomic coordinates
            GlobalCoordinateGrid = false;

            synchronized(GhastlyLock){
                // exclude global coordinate grid proposed atoms
                Ghastly.ExcludeProposed();
                // flag to unselect selected atoms (which shouldn't be selected anyways
                    Ghastly.UnselectAtoms = true;
                    // allow atom selection
                    Ghastly.LockSelection = false;
                    // remove the plane automatically calculated by the
                    Ghastly.ClearPlanePoints();

                    // set plane indicatoion to red
                    NICS_Grid_dialog_textField.setBackground(Color.RED);

                }

                // do a first pass calculation based on the user information already present
                if(NICS_Grid_ByPoints_RadioButton.isSelected()){
                    NICS_Grid_NumberPoints_Calculate();
                }else{
                    NICS_Grid_Delta_Calculate();
                }

            }
    }//GEN-LAST:event_NICS_Grid_By_Atom_Specified_Plane_RadioActionPerformed

    private void NICS_Grid_dialog_clearAtomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_dialog_clearAtomButtonActionPerformed
        // TODO add your handling code here:
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false;
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();
            if(!GlobalCoordinateGrid){
                NICS_Grid_dialog_textField.setBackground(Color.RED);
            }
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            NICS_Grid_dialog_saveReturnButton.setEnabled(false);
            NICS_Grid_dialog_saveButton.setEnabled(false);
        }
    }//GEN-LAST:event_NICS_Grid_dialog_clearAtomButtonActionPerformed

    private void NICS_Grid_ByDelta_RadioButtonNICS_Scan_IntervelByDelta_Radio_Action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_ByDelta_RadioButtonNICS_Scan_IntervelByDelta_Radio_Action
        // TODO add your handling code here:
        if(NICS_Grid_ByDelta_RadioButton.isSelected()){
            NICS_Grid_XDelta_textField.setEnabled(true);
            NICS_Grid_YDelta_textField.setEnabled(true);
            NICS_Grid_ZDelta_textField.setEnabled(true);
            NICS_Grid_XNumberPoints_textField.setEnabled(false);
            NICS_Grid_YNumberPoints_textField.setEnabled(false);
            NICS_Grid_ZNumberPoints_textField.setEnabled(false);
        }
    }//GEN-LAST:event_NICS_Grid_ByDelta_RadioButtonNICS_Scan_IntervelByDelta_Radio_Action

    private void NICS_Grid_ByPoints_RadioButtonNICS_Scan_IntervalByPoint_Radio_Action(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICS_Grid_ByPoints_RadioButtonNICS_Scan_IntervalByPoint_Radio_Action
        // TODO add your handling code here:
        if(NICS_Grid_ByPoints_RadioButton.isSelected()){
            NICS_Grid_XDelta_textField.setEnabled(false);
            NICS_Grid_YDelta_textField.setEnabled(false);
            NICS_Grid_ZDelta_textField.setEnabled(false);
            NICS_Grid_XNumberPoints_textField.setEnabled(true);
            NICS_Grid_YNumberPoints_textField.setEnabled(true);
            NICS_Grid_ZNumberPoints_textField.setEnabled(true);
        }
    }//GEN-LAST:event_NICS_Grid_ByPoints_RadioButtonNICS_Scan_IntervalByPoint_Radio_Action

    private void IncludeMoleculeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncludeMoleculeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IncludeMoleculeActionPerformed

    private void FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileChooserActionPerformed

    private void NICS_Scan_Calculate_Release(){
        synchronized(GhastlyLock){            
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;            
            Ghastly.ExcludeProposed();       
            NICS_Scan_dialog_clearParameterButton.setEnabled(false);
            NICS_Scan_dialog_clearAtomButton.setEnabled(false);
            NICS_Scan_dialog_saveReturnButton.setEnabled(false);
            NICS_Scan_dialog_saveButton.setEnabled(false);  
        }
    }
        private void NICS_Grid_Calculate_Release(){
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();       
            NICS_Grid_dialog_clearParameterButton.setEnabled(false);
            NICS_Grid_dialog_clearAtomButton.setEnabled(false);
            NICS_Grid_dialog_saveReturnButton.setEnabled(false);
            NICS_Grid_dialog_saveButton.setEnabled(false);  
        }
    }
    
        
        
        
      
        
        
        
    private void NICS_Scan_NumberPoints_Calculate(){
        String line = null;
        float DeltaValue = 0;
        float MinValue = 0;
        float MaxValue = 0;
        float TotalDelta = 0;
        float NumberPointsInput = 0;
        int NumberPoints = 0;
        
        // sanity check everything else before numberpoints calculation
        NICS_Scan_Calculate();    
        
        
        // catch number of points error early, if it's nonsense set to undefined
        // and set delta to zero, calculate other values and return
        line = NICS_Scan_NumberPoints_textField.getText();
        try{NumberPointsInput = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("Number Points Error");            
            NICS_Scan_NumberPoints_textField.setText("");
            NICS_Scan_Delta_textField.setText("0.0");
            NICS_Scan_Calculate();
            return;
        };
              
        // read in the max and min values now
        line = NICS_Scan_MinRange_textField.getText();        
        try{MinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };
        
        line = NICS_Scan_MaxRange_textField.getText();
        try{MaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        TotalDelta = MaxValue - MinValue;
        // if a negative number was entered, assume that positive was meant and flip the sign 
        if(NumberPointsInput < 0){
            NumberPointsInput = Math.abs(NumberPointsInput);
        }
        // convert floating point to integer assuming value after decimal point are a typo
        NumberPoints = (int)Math.floor(NumberPointsInput);
        // if the value is zero, set Number Point to undefined and delta to zero and move to calculation/return
        // also needs to be more than one for a "scan"
        if((NumberPoints == 0) || (NumberPoints == 1)){
            NICS_Scan_NumberPoints_textField.setText("");
            NICS_Scan_Delta_textField.setText("0.0");
            NICS_Scan_Calculate();
            return;
        }        
        // number of points is properly formatted
        // calculate delta and input all values into the 
        // the number of points is inclusive so subtract one for the division
        // cannot have a single point in this calculation, this is handled above
        
        
        
        DeltaValue = TotalDelta / ((float)(NumberPoints) - 1.0f);                
        NICS_Scan_NumberPoints_textField.setText(Integer.toString(NumberPoints));
        NICS_Scan_Delta_textField.setText(Float.toString(DeltaValue));
        NICS_Scan_Calculate();
        return;
    }
    

   
    
    
    
    
    private void NICS_Grid_NumberPoints_Calculate(){
        String line = null;
        
        float XDeltaValue = 0;
        float XMinValue = 0;
        float XMaxValue = 0;
        float XTotalDelta = 0;
        float XNumberPointsInput = 0;
        int XNumberPoints = 0;
        
        
        float YDeltaValue = 0;
        float YMinValue = 0;
        float YMaxValue = 0;
        float YTotalDelta = 0;
        float YNumberPointsInput = 0;
        int YNumberPoints = 0;
        
        float ZDeltaValue = 0;
        float ZMinValue = 0;
        float ZMaxValue = 0;
        float ZTotalDelta = 0;
        float ZNumberPointsInput = 0;
        int ZNumberPoints = 0;
        
        // X values
        
        // sanity check everything else before number points calculation
        NICS_Grid_Calculate();    
 
        // catch number of points error early, if it's nonsense set to undefined
        // and set delta to zero, calculate other values and return
        line = NICS_Grid_XNumberPoints_textField.getText();
        try{XNumberPointsInput = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("Number Points Error");            
            NICS_Grid_XNumberPoints_textField.setText("");
            NICS_Grid_XDelta_textField.setText("0.0");
            NICS_Grid_Calculate();
            return;
        };
        // read in the max and min values now
        line = NICS_Grid_XMinRange_textField.getText();        
        try{XMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };
        
        line = NICS_Grid_XMaxRange_textField.getText();
        try{XMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        // Y values
        
        // catch number of points error early, if it's nonsense set to undefined
        // and set delta to zero, calculate other values and return
        line = NICS_Grid_YNumberPoints_textField.getText();
        try{YNumberPointsInput = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("Number Points Error");            
            NICS_Grid_YNumberPoints_textField.setText("");
            NICS_Grid_YDelta_textField.setText("0.0");
            NICS_Grid_Calculate();
            return;
        };
        // read in the max and min values now
        line = NICS_Grid_YMinRange_textField.getText();        
        try{YMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };
        
        line = NICS_Grid_YMaxRange_textField.getText();
        try{YMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        // Z values
        
        
        // catch number of points error early, if it's nonsense set to undefined
        // and set delta to zero, calculate other values and return
        line = NICS_Grid_ZNumberPoints_textField.getText();
        try{ZNumberPointsInput = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("Number Points Error");            
            NICS_Grid_ZNumberPoints_textField.setText("");
            NICS_Grid_ZDelta_textField.setText("0.0");
            NICS_Grid_Calculate();
            return;
        };
        // read in the max and min values now
        line = NICS_Grid_ZMinRange_textField.getText();        
        try{ZMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };
        
        line = NICS_Grid_ZMaxRange_textField.getText();
        try{ZMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Grid input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        
        
        XTotalDelta = XMaxValue - XMinValue;
        YTotalDelta = YMaxValue - YMinValue;
        ZTotalDelta = ZMaxValue - ZMinValue;
        // if a negative number was entered, assume that positive was meant and flip the sign 
        if(XNumberPointsInput < 0){
            XNumberPointsInput = Math.abs(XNumberPointsInput);            
        }
        if(YNumberPointsInput < 0){
            YNumberPointsInput = Math.abs(YNumberPointsInput);            
        }
        if(ZNumberPointsInput < 0){
            ZNumberPointsInput = Math.abs(ZNumberPointsInput);           
        }
        // convert floating point to integer assuming value after decimal point are a typo
        XNumberPoints = (int)Math.floor(XNumberPointsInput);
        YNumberPoints = (int)Math.floor(YNumberPointsInput);
        ZNumberPoints = (int)Math.floor(ZNumberPointsInput);
        
        
        
        
        
        
        
        // if the value is zero, set Number Point to undefined and delta to zero and move to calculation/return
        
        if(XNumberPoints == 0){
            NICS_Grid_XNumberPoints_textField.setText("");
            NICS_Grid_XDelta_textField.setText("0.0");
            // avoid a divide by zero for the delta calculation
        }else if(XNumberPoints == 1){
            XDeltaValue = 0.0f;
            NICS_Grid_XNumberPoints_textField.setText(Integer.toString(XNumberPoints));
            NICS_Grid_XDelta_textField.setText(Float.toString(XDeltaValue));   
        }else{        
        // number of points is properly formatted
        // calculate delta and input all values into the 
        // the number of points is inclusive so subtract one for the division
        // cannot have a single point in this calculation, this is handled above
            XDeltaValue = XTotalDelta / ((float)(XNumberPoints) - 1.0f);                
            NICS_Grid_XNumberPoints_textField.setText(Integer.toString(XNumberPoints));
            NICS_Grid_XDelta_textField.setText(Float.toString(XDeltaValue));            
        }
        
        // y values
        
        if(YNumberPoints == 0){
            NICS_Grid_YNumberPoints_textField.setText("");
            NICS_Grid_YDelta_textField.setText("0.0");           
        }else if(YNumberPoints == 1){
            YDeltaValue = 0.0f;
            NICS_Grid_YNumberPoints_textField.setText(Integer.toString(YNumberPoints));
            NICS_Grid_YDelta_textField.setText(Float.toString(YDeltaValue));   
        }else{        
        // number of points is properly formatted
        // calculate delta and input all values into the 
        // the number of points is inclusive so subtract one for the division
        // cannot have a single point in this calculation, this is handled above
            YDeltaValue = YTotalDelta / ((float)(YNumberPoints) - 1.0f);                
            NICS_Grid_YNumberPoints_textField.setText(Integer.toString(YNumberPoints));
            NICS_Grid_YDelta_textField.setText(Float.toString(YDeltaValue));            
        }
        
        // z values
        
        if(ZNumberPoints == 0){
            NICS_Grid_ZNumberPoints_textField.setText("");
            NICS_Grid_ZDelta_textField.setText("0.0");           
        }else if(ZNumberPoints == 1){
            ZDeltaValue = 0.0f;
            NICS_Grid_ZNumberPoints_textField.setText(Integer.toString(ZNumberPoints));
            NICS_Grid_ZDelta_textField.setText(Float.toString(ZDeltaValue));   
        }else{        
        // number of points is properly formatted
        // calculate delta and input all values into the 
        // the number of points is inclusive so subtract one for the division
        // cannot have a single point in this calculation, this is handled above
            ZDeltaValue = ZTotalDelta / ((float)(ZNumberPoints) - 1.0f);                
            NICS_Grid_ZNumberPoints_textField.setText(Integer.toString(ZNumberPoints));
            NICS_Grid_ZDelta_textField.setText(Float.toString(ZDeltaValue));            
        }
        
        
        NICS_Grid_Calculate();
         
    }        
     
     
     
     
     
    
    
    
     
    
    private void NICS_Scan_Delta_Calculate(){
         //modify number of points to match the delta, first check delta for sanity
        String line = null;
        float DeltaValue = 0;
        float MinValue = 0;
        float MaxValue = 0;
        float TotalDelta = 0;
        int NumberPoints = 0;
        float NumberPointFP = 0;
        
        // sanity check everything else before delta calculation
        NICS_Scan_Calculate();    
        
        line = NICS_Scan_Delta_textField.getText();
        try{DeltaValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("DeltaValue Error");
            DeltaValue = 0.0f;
            NICS_Scan_Delta_textField.setText("0.0");
        };
        
        line = NICS_Scan_MinRange_textField.getText();        
        try{MinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };
        
        line = NICS_Scan_MaxRange_textField.getText();
        try{MaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        TotalDelta = MaxValue - MinValue;
            
        
        // assume that if the delta is < 0, user accidentally added a minus sign, swap it
        if(DeltaValue < 0){
            DeltaValue = Math.abs(DeltaValue);
            NICS_Scan_Delta_textField.setText(Float.toString(DeltaValue));
        }    
        // if the delta value is set to zero, set the number of points to undefined and move on
        // othewise the number of points is infinite
        if(TotalDelta == 0){
            NICS_Scan_Delta_textField.setText("0.0");
            NICS_Scan_NumberPoints_textField.setText("");
        }else if(DeltaValue == 0.0f){
            NICS_Scan_NumberPoints_textField.setText("");            
        // set delta to zero and number of points to undefined if delta is larger than total delta
        }else if(TotalDelta < DeltaValue){
            NICS_Scan_Delta_textField.setText("0.0");
            NICS_Scan_NumberPoints_textField.setText("");           
        // delta is a well defined value, run calculation    
        }else{
            // not 0 so calculate the number of point properly
            //the end points are inclusive, so floor(Total / delta) + 1 = number of points 
            //assume every other points error handling was already checked by the generic check below
            // this has to be the case
            NumberPointFP = TotalDelta / DeltaValue;            
            NumberPoints = (int)Math.floor((double)NumberPointFP) + 1;                                    
            NICS_Scan_NumberPoints_textField.setText(Integer.toString(NumberPoints));           
        }
        NICS_Scan_Calculate();                    
    }
    
    
    
    
    
    
    
    
    
    
    
    // do delta calculations for X, Y, and Z at the same time. It's low overhead and saves code space
    private void NICS_Grid_Delta_Calculate(){
         //modify number of points to match the delta, first check delta for sanity
        String line = null;
        float ZDeltaValue = 0;
        float ZMinValue = 0;
        float ZMaxValue = 0;
        float ZTotalDelta = 0;
        int ZNumberPoints = 0;
        float ZNumberPointFP = 0;
        
        float YDeltaValue = 0;
        float YMinValue = 0;
        float YMaxValue = 0;
        float YTotalDelta = 0;
        int YNumberPoints = 0;
        float YNumberPointFP = 0;
        
        float XDeltaValue = 0;
        float XMinValue = 0;
        float XMaxValue = 0;
        float XTotalDelta = 0;
        int XNumberPoints = 0;
        float XNumberPointFP = 0;
        
        // sanity check everything else before delta calculation
        NICS_Grid_Calculate();  
        
        // check X
        
        line = NICS_Grid_XDelta_textField.getText();
        try{XDeltaValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("DeltaValue Error");
            XDeltaValue = 0.0f;
            NICS_Grid_XDelta_textField.setText("0.0");
        };       
        line = NICS_Grid_XMinRange_textField.getText();        
        try{XMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };        
        line = NICS_Grid_XMaxRange_textField.getText();
        try{XMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        // check Y
        
        line = NICS_Grid_YDelta_textField.getText();
        try{YDeltaValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("DeltaValue Error");
            YDeltaValue = 0.0f;
            NICS_Grid_YDelta_textField.setText("0.0");
        };       
        line = NICS_Grid_YMinRange_textField.getText();        
        try{YMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };        
        line = NICS_Grid_YMaxRange_textField.getText();
        try{YMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        // check Z
        
        line = NICS_Grid_ZDelta_textField.getText();
        try{ZDeltaValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            System.out.println("DeltaValue Error");
            ZDeltaValue = 0.0f;
            NICS_Grid_ZDelta_textField.setText("0.0");
        };        
        line = NICS_Grid_ZMinRange_textField.getText();        
        try{ZMinValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in minimum value");
            System.out.flush();
            assert(false);
        };        
        line = NICS_Grid_ZMaxRange_textField.getText();
        try{ZMaxValue = Float.parseFloat(line);}
        catch(NumberFormatException e){
            // no way you get here, crash the program
            System.out.println("Error in NICS Scan input fields interface on reading in maximum value");
            System.out.flush();
            assert(false);
        };
        
        // set total delta
        
        
        XTotalDelta = XMaxValue - XMinValue;
        YTotalDelta = YMaxValue - YMinValue;
        ZTotalDelta = ZMaxValue - ZMinValue;
        
        

        // X calculate
        if(XDeltaValue < 0){
            XDeltaValue = Math.abs(XDeltaValue);
            NICS_Grid_XDelta_textField.setText(Float.toString(XDeltaValue));
        }   
        // if the delta value is set to zero, set the number of points to one and move on
        // othewise the number of points is infinite
        if(XTotalDelta == 0){
            NICS_Grid_XDelta_textField.setText("0.0");
            NICS_Grid_XNumberPoints_textField.setText("1");            
        }else if(XDeltaValue == 0.0f){
            NICS_Grid_XNumberPoints_textField.setText("1");                                                                      
        // set delta to zero and number of points to undefined if delta is larger than total delta
        }else if(XTotalDelta < XDeltaValue){
            NICS_Grid_XDelta_textField.setText("0.0");
            NICS_Grid_XNumberPoints_textField.setText("");
        // delta is a well defined value, run calculation    
        }else{
            // not 0 so calculate the number of points properly
            //the end points are inclusive, so floor(Total / delta) + 1 = number of points 
            //assume every other points error handling was already checked by the generic check below
            // this has to be the case
            XNumberPointFP = XTotalDelta / XDeltaValue;            
            XNumberPoints = (int)Math.floor((double)XNumberPointFP) + 1;                        
            //System.out.println("Delta Test, Number Points:" + XNumberPoints + " in fp: " + XNumberPointFP + " Delta Value: " + DeltaValue);
            NICS_Grid_XNumberPoints_textField.setText(Integer.toString(XNumberPoints));         
        }
        
        
        // Y calculate
        if(YDeltaValue < 0){
            YDeltaValue = Math.abs(YDeltaValue);
            NICS_Grid_YDelta_textField.setText(Float.toString(YDeltaValue));
        }  
        // if the delta value is set to zero, set the number of points to one and move on
        // othewise the number of points is infinite
        if(YTotalDelta == 0){
            NICS_Grid_YDelta_textField.setText("0.0");
            NICS_Grid_YNumberPoints_textField.setText("1");            
        }else if(YDeltaValue == 0.0f){
            NICS_Grid_YNumberPoints_textField.setText("1");                                                         
        // set delta to zero and number of points to undefined if delta is larger than total delta
        }else if(YTotalDelta < YDeltaValue){
            NICS_Grid_YDelta_textField.setText("0.0");
            NICS_Grid_YNumberPoints_textField.setText("");
        // delta is a well defined value, run calculation    
        }else{
            // not 0 so calculate the number of point properly
            //the end points are inclusive, so floor(Total / delta) + 1 = number of points 
            //assume every other points error handling was already checked by the generic check below
            // this has to be the case
            YNumberPointFP = YTotalDelta / YDeltaValue;            
            YNumberPoints = (int)Math.floor((double)YNumberPointFP) + 1;                        
            //System.out.println("Delta Test, Number Points:" + YNumberPoints + " in fp: " + YNumberPointFP + " Delta Value: " + DeltaValue);
            NICS_Grid_YNumberPoints_textField.setText(Integer.toString(YNumberPoints));           
        }
        
        // Z calculate
        // if the delta value is set to zero, set the number of points to one and move on
        // othewise the number of points is infinite
        if(ZDeltaValue < 0){
            ZDeltaValue = Math.abs(ZDeltaValue);
            NICS_Grid_ZDelta_textField.setText(Float.toString(ZDeltaValue));
        }  
        if(ZTotalDelta == 0){
            NICS_Grid_ZDelta_textField.setText("0.0");
            NICS_Grid_ZNumberPoints_textField.setText("1");            
        }else if(ZDeltaValue == 0.0f){
            NICS_Grid_ZNumberPoints_textField.setText("1");                                                         
        // set delta to zero and number of points to undefined if delta is larger than total delta
        }else if(ZTotalDelta < ZDeltaValue){
            NICS_Grid_ZDelta_textField.setText("0.0");
            NICS_Grid_ZNumberPoints_textField.setText("");
        // delta is a well defined value, run calculation    
        }else{
            // not 0 so calculate the number of point properly
            //the end points are inclusive, so floor(Total / delta) + 1 = number of points 
            //assume every other points error handling was already checked by the generic check below
            // this has to be the case
            ZNumberPointFP = ZTotalDelta / ZDeltaValue;            
            ZNumberPoints = (int)Math.floor((double)ZNumberPointFP) + 1;                        
            //System.out.println("Delta Test, Number Points:" + ZNumberPoints + " in fp: " + ZNumberPointFP + " Delta Value: " + DeltaValue);
            NICS_Grid_ZNumberPoints_textField.setText(Integer.toString(ZNumberPoints));
        }
        
        // now do grid calculation
        
        NICS_Grid_Calculate();
    }
    
    
    
    
    
    
    
    
    private void NICS_Grid_Calculate(){
        float ZMinValue = 0;
        float ZMaxValue = 0;
        float ZDeltaValue = 0;
        float YMinValue = 0;
        float YMaxValue = 0;
        float YDeltaValue = 0;
        float XMinValue = 0;
        float XMaxValue = 0;
        float XDeltaValue = 0;
        float ThetaValue = 0;
        float PhiValue = 0;
        float X_Origin;
        float Y_Origin;
        float Z_Origin;
        String line = null;
        synchronized(GhastlyLock){
            
            // check if we are working from a global plane first
            // and check and adjust values as needed as well as calculate the plane
            if(GlobalCoordinateGrid){
                // check the X, Y, and Z coordinates to make sure they
                // are real numbers, no other restrictions on them
                line = NICS_Grid_XExternal_Text.getText();
                try{X_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Grid_XExternal_Text.setText("");                    
                    return;
                };
                line = NICS_Grid_YExternal_Text.getText();
                try{Y_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Grid_YExternal_Text.setText("");                    
                    return;
                };
                line = NICS_Grid_ZExternal_Text.getText();
                try{Z_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Grid_ZExternal_Text.setText("");                    
                    return;
                };
                synchronized(GhastlyLock){
                    
                    Ghastly.GlobalCoordinatePlane(X_Origin, Y_Origin, Z_Origin);
                }           
            }
          
            // x values
            
            line = NICS_Grid_XMinRange_textField.getText();
            try{XMinValue = Float.parseFloat(line);}
            catch(NumberFormatException e){  
                System.out.println("MinValue Error");
                XMinValue = 0.0f;
                NICS_Grid_XMinRange_textField.setText("0.0");
            };            
            line = NICS_Grid_XMaxRange_textField.getText();                        
            try{XMaxValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("MaxValue Error");
                XMaxValue = 0.0f;
                NICS_Grid_XMaxRange_textField.setText("0.0");
            }                                                     
            line = NICS_Grid_XDelta_textField.getText();
            try{XDeltaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                // no way you get here, crash the program, this is handled in the delta value handler
                System.out.println("Error in NICS Scan input fields interface on reading in Delta value");
                System.out.flush();
                assert(false);
            };
            
            // y values
            
            line = NICS_Grid_YMinRange_textField.getText();
            try{YMinValue = Float.parseFloat(line);}
            catch(NumberFormatException e){  
                System.out.println("MinValue Error");
                YMinValue = 0.0f;
                NICS_Grid_YMinRange_textField.setText("0.0");
            };            
            line = NICS_Grid_YMaxRange_textField.getText();                        
            try{YMaxValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("MaxValue Error");
                YMaxValue = 0.0f;
                NICS_Grid_YMaxRange_textField.setText("0.0");
            }                       
            line = NICS_Grid_YDelta_textField.getText();
            try{YDeltaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                // no way you get here, crash the program, this is handled in the delta value handler
                System.out.println("Error in NICS Scan input fields interface on reading in Delta value");
                System.out.flush();
                assert(false);
            };
            
            // x values
                                                
            line = NICS_Grid_ZMinRange_textField.getText();
            try{ZMinValue = Float.parseFloat(line);}
            catch(NumberFormatException e){  
                System.out.println("MinValue Error");
                ZMinValue = 0.0f;
                NICS_Grid_ZMinRange_textField.setText("0.0");
            };            
            line = NICS_Grid_ZMaxRange_textField.getText();                        
            try{ZMaxValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("MaxValue Error");
                ZMaxValue = 0.0f;
                NICS_Grid_ZMaxRange_textField.setText("0.0");
            }                       
            line = NICS_Grid_ZDelta_textField.getText();
            try{ZDeltaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                // no way you get here, crash the program, this is handled in the delta value handler
                System.out.println("Error in NICS Scan input fields interface on reading in Delta value");
                System.out.flush();
                assert(false);
            };

            // polar rotation values
            
            line = NICS_Grid_Theta_textField.getText();
            try{ThetaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("ThetaValue Error");
                ThetaValue = 0.0f;
                NICS_Grid_Theta_textField.setText("0.0");
            };
            
            line = NICS_Grid_Phi_textField.getText();
            try{PhiValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("PhiValue Error");
                PhiValue = 0.0f;
                NICS_Grid_Phi_textField.setText("0.0");
            };
            
            // check and correct polar rotation values to angles < 360 
            
            if(ThetaValue >= 360.0){
                ThetaValue = ThetaValue - 360.0f * ((ThetaValue / 360.0f) - (ThetaValue%360.0f));
                NICS_Scan_Theta_textField.setText(Float.toString(ThetaValue));
            };
            if(ThetaValue <= -360.0){
                ThetaValue = ThetaValue + 360.0f * ((-ThetaValue / 360.0f) + (ThetaValue%360.0f));
                NICS_Scan_Theta_textField.setText(Float.toString(ThetaValue));
            };

            if(PhiValue >= 360.0){
                PhiValue = PhiValue - 360.0f * ((PhiValue / 360.0f) - (PhiValue%360.0f));
                NICS_Scan_Phi_textField.setText(Float.toString(PhiValue));
            };
            if(PhiValue <= -360.0){
                PhiValue = PhiValue + 360.0f * ((-PhiValue / 360.0f) + (PhiValue%360.0f));
                NICS_Scan_Phi_textField.setText(Float.toString(PhiValue));
            };
            
            
            // all good generate the grid if the values are right first
            //check for the cases where there is one plane
             
            
            if(((XDeltaValue == 0) &&
                ((YDeltaValue > 0) && ((YMaxValue - YMinValue) >= YDeltaValue) && (YMaxValue > YMinValue))&&
                ((ZDeltaValue > 0) && ((ZMaxValue - ZMinValue) >= ZDeltaValue) && (ZMaxValue > ZMinValue))) ||
                    
               (((XDeltaValue > 0) && ((XMaxValue - XMinValue) >= XDeltaValue) && (XMaxValue > XMinValue)) &&
                (YDeltaValue == 0) &&
                ((ZDeltaValue > 0) && ((ZMaxValue - ZMinValue) >= ZDeltaValue) && (ZMaxValue > ZMinValue))) ||
                    
               (((XDeltaValue > 0) && ((XMaxValue - XMinValue) >= XDeltaValue) && (XMaxValue > XMinValue))  &&
                ((YDeltaValue > 0) && ((YMaxValue - YMinValue) >= YDeltaValue) && (YMaxValue > YMinValue))&&
                (ZDeltaValue == 0)) &&
                Ghastly.PlaneCalculated()){
                NICS_Grid Temp = new NICS_Grid(); 
                Temp.Define(0, Ghastly.GetPlane(), 
                            XMinValue, XMaxValue, XDeltaValue,
                            YMinValue, YMaxValue, YDeltaValue,
                            ZMinValue, ZMaxValue, ZDeltaValue,
                            ThetaValue, PhiValue);
                Ghastly.NewProposed(Temp);
                Ghastly.DisplayProposed = true;
                NICS_Grid_dialog_clearParameterButton.setEnabled(true);
                if(!GlobalCoordinateGrid)NICS_Grid_dialog_clearAtomButton.setEnabled(true);
                NICS_Grid_dialog_saveReturnButton.setEnabled(true);
                NICS_Grid_dialog_saveButton.setEnabled(true);
            // cases where there are no planes              
            }else if((XMaxValue > XMinValue)&&((XMaxValue - XMinValue) >= XDeltaValue) 
                && XDeltaValue != 0
                && (YMaxValue > YMinValue)&&((YMaxValue - YMinValue) >= YDeltaValue) 
                && YDeltaValue != 0
                && (ZMaxValue > ZMinValue)&&((ZMaxValue - ZMinValue) >= ZDeltaValue) 
                && ZDeltaValue != 0                        
                &&(Ghastly.PlaneCalculated()) ){                
                
                NICS_Grid Temp = new NICS_Grid(); 
                Temp.Define(0, Ghastly.GetPlane(), 
                            XMinValue, XMaxValue, XDeltaValue,
                            YMinValue, YMaxValue, YDeltaValue,
                            ZMinValue, ZMaxValue, ZDeltaValue,
                            ThetaValue, PhiValue);
                Ghastly.NewProposed(Temp);
                Ghastly.DisplayProposed = true;
                NICS_Grid_dialog_clearParameterButton.setEnabled(true);
                if(!GlobalCoordinateGrid)NICS_Grid_dialog_clearAtomButton.setEnabled(true);
                NICS_Grid_dialog_saveReturnButton.setEnabled(true);
                NICS_Grid_dialog_saveButton.setEnabled(true);
            // nothing to calculate, set up wrong
            }else{                            
                Ghastly.DisplayProposed = false; 
                //Ghastly.LockSelection = false;
                // don't need to unselect here
                Ghastly.UnselectAtoms = false;
                Ghastly.ExcludeProposed();       
                NICS_Grid_dialog_clearParameterButton.setEnabled(false);
                //NICS_Grid_dialog_clearAtomButton.setEnabled(false);
                NICS_Grid_dialog_saveReturnButton.setEnabled(false);
                NICS_Grid_dialog_saveButton.setEnabled(false);                  
            }
            
        }
        
        
        
        
    }
    
    
    
    
    
    
    
    private void NICS_Scan_Calculate(){
        // TODO add your handling code here:
        float MinValue = 0;
        float MaxValue = 0;
        float DeltaValue = 0;
        float ThetaValue = 0;
        float PhiValue = 0;
        float X_Origin;
        float Y_Origin;
        float Z_Origin;
        String line = null;
        
        
        synchronized(GhastlyLock){
            
            
            if(GlobalCoordinateScan){
                // check the X, Y, and Z coordinates to make sure they
                // are real numbers, no other restrictions on them
                line = NICS_Scan_XExternal_Text.getText();
                try{X_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Scan_XExternal_Text.setText("");                    
                    return;
                };
                line = NICS_Scan_YExternal_Text.getText();
                try{Y_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Scan_YExternal_Text.setText("");                    
                    return;
                };
                line = NICS_Scan_ZExternal_Text.getText();
                try{Z_Origin = Float.parseFloat(line);}
                catch(NumberFormatException e){
                    System.out.println("Number Points Error");            
                    NICS_Scan_ZExternal_Text.setText("");                    
                    return;
                };
                
                System.out.println("X " +X_Origin+" Y "+Y_Origin+" Z "+Z_Origin);
                
                synchronized(GhastlyLock){
                    
                    Ghastly.GlobalCoordinatePlane(X_Origin, Y_Origin, Z_Origin);
                }           
            }
            
            
            
            
            
            line = NICS_Scan_MinRange_textField.getText();
            try{MinValue = Float.parseFloat(line);}
            catch(NumberFormatException e){  
                System.out.println("MinValue Error");
                MinValue = 0.0f;
                NICS_Scan_MinRange_textField.setText("0.0");
            };
            
           line = NICS_Scan_MaxRange_textField.getText();                        
            try{MaxValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("MaxValue Error");
                MaxValue = 0.0f;
                NICS_Scan_MaxRange_textField.setText("0.0");
            }
                       
            line = NICS_Scan_Delta_textField.getText();
            try{DeltaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                // no way you get here, crash the program, this is handled in the delta value handler
                System.out.println("Error in NICS Scan input fields interface on reading in Delts value");
                System.out.flush();
                assert(false);
            };
          
            line = NICS_Scan_Theta_textField.getText();
            try{ThetaValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("ThetaValue Error");
                ThetaValue = 0.0f;
                NICS_Scan_Theta_textField.setText("0.0");
            };
            
            line = NICS_Scan_Phi_textField.getText();
            try{PhiValue = Float.parseFloat(line);}
            catch(NumberFormatException e){
                System.out.println("PhiValue Error");
                PhiValue = 0.0f;
                NICS_Scan_Phi_textField.setText("0.0");
            };
            
            if(ThetaValue >= 360.0){
                ThetaValue = ThetaValue - 360.0f * ((ThetaValue / 360.0f) - (ThetaValue%360.0f));
                NICS_Scan_Theta_textField.setText(Float.toString(ThetaValue));
            };
            if(ThetaValue <= -360.0){
                ThetaValue = ThetaValue + 360.0f * ((-ThetaValue / 360.0f) + (ThetaValue%360.0f));
                NICS_Scan_Theta_textField.setText(Float.toString(ThetaValue));
            };

            if(PhiValue >= 360.0){
                PhiValue = PhiValue - 360.0f * ((PhiValue / 360.0f) - (PhiValue%360.0f));
                NICS_Scan_Phi_textField.setText(Float.toString(PhiValue));
            };
            if(PhiValue <= -360.0){
                PhiValue = PhiValue + 360.0f * ((-PhiValue / 360.0f) + (PhiValue%360.0f));
                NICS_Scan_Phi_textField.setText(Float.toString(PhiValue));
            };


            if((MaxValue > MinValue)&&((MaxValue - MinValue) >= DeltaValue)&&(Ghastly.PlaneCalculated()) && DeltaValue != 0){
                NICS_Scan Temp = new NICS_Scan();           
                Temp.Define(0, Ghastly.GetPlane(), MinValue, MaxValue, DeltaValue, ThetaValue, PhiValue);
                
                Ghastly.NewProposed(Temp);
                Ghastly.DisplayProposed = true;
                NICS_Scan_dialog_clearParameterButton.setEnabled(true);
                NICS_Scan_dialog_clearAtomButton.setEnabled(true);
                NICS_Scan_dialog_saveReturnButton.setEnabled(true);
                NICS_Scan_dialog_saveButton.setEnabled(true);
            }else{                            
                Ghastly.DisplayProposed = false; 
                // don't need to unselect here
                Ghastly.UnselectAtoms = false;
                Ghastly.ExcludeProposed();       
                NICS_Scan_dialog_clearParameterButton.setEnabled(false);                
                NICS_Scan_dialog_saveReturnButton.setEnabled(false);
                NICS_Scan_dialog_saveButton.setEnabled(false);                  
            }
        }
    }
    
    private void NICS_0_Calculate(){
        synchronized(GhastlyLock){
 
            NICS_0 Temp = new NICS_0();
            Temp.Define(0, Ghastly.GetPlane());
            Ghastly.NewProposed(Temp);
            //Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = true;        
            NICS0_dialog_clearButton.setEnabled(true);
            NICS0_dialog_saveReturnButton.setEnabled(true);
            NICS0_dialog_saveButton.setEnabled(true);
            
        }
    }
    
    private void NICS_0_Calculate_Release(){

        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();       
            NICS0_dialog_clearButton.setEnabled(false);
            NICS0_dialog_saveReturnButton.setEnabled(false);
            NICS0_dialog_saveButton.setEnabled(false);
            
        }        
    }
    private void NICS_1_Calculate(){
         // plane must be defined or button would be unavailable
        // create a ghost atom, add it to the proposed list
        // lock the atom selection so that it can't change during
        // the decision
        // display only the proposed ghost atom
        // let the user have the option of clearing the choice 
        // or saving the new ghost atom
        // remove access to the calulate button
        synchronized(GhastlyLock){
            NICS_1 Temp = new NICS_1();

            String PlaneType = (String)NICS1_dialog_ChoosePlane.getSelectedItem();
            if(PlaneType.equals("Above Plane")){
                Temp.Define(0, Ghastly.GetPlane(), 1);

            }else if(PlaneType.equals("Below Plane")){
                Temp.Define(0, Ghastly.GetPlane(), -1);

            }else if(PlaneType.equals("Both")){
                Temp.Define(0, Ghastly.GetPlane(), 0);

            }else{
                System.out.println("Shouldn't be here: NICS1_dialog_calculateButtonActionPerformed");
                assert(false);
            }        
            Ghastly.NewProposed(Temp);
            //Ghastly.LockSelection = true;
            Ghastly.DisplayProposed = true;        
            NICS1_dialog_clearButton.setEnabled(true);
            NICS1_dialog_saveReturnButton.setEnabled(true);
            
            NICS1_dialog_saveButton.setEnabled(true);
        }    
    }
    
    private void NICS_1_Calculate_Release(){
         // no longer display the proposed ghost atom
        // unlock the selection 
        // unselect selected atoms
        // and remove the propsed atom from the list
        // remove clear button and save button option
        // and disable calculate button
        synchronized(GhastlyLock){
            Ghastly.DisplayProposed = false; 
            Ghastly.LockSelection = false;
            Ghastly.UnselectAtoms = true;
            Ghastly.ExcludeProposed();       
            NICS1_dialog_clearButton.setEnabled(false);
            NICS1_dialog_saveReturnButton.setEnabled(false);
            NICS1_dialog_saveButton.setEnabled(false);
           
            NICS1_dialog_ChoosePlane.setEnabled(false);
        }   
    }
    
    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewGhostAtomType;
    private javax.swing.JPanel BlankPanel;
    private javax.swing.JMenuItem ClearGhostAtom;
    private javax.swing.JMenuItem CloseMenu;
    private javax.swing.JComboBox<String> ComboBoxGhostType;
    private javax.swing.JPanel DeltaPointContainer;
    private javax.swing.JMenuItem ExitMenu;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JPanel FileChooserSaveOptions;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JFrame GhostAtomForm;
    private javax.swing.JMenu GhostAtomMenu;
    private javax.swing.JTextField GhostAtomNameSelected;
    private javax.swing.JTable GhostAtomTable;
    private javax.swing.JPanel GridCoordinateContainer;
    private javax.swing.JCheckBox IncludeMolecule;
    private javax.swing.JPanel LengthDeltaContainer_Scan;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JButton Main_Menu_return_button;
    private javax.swing.JButton NICS0_dialog_cancelButton;
    private javax.swing.JButton NICS0_dialog_clearButton;
    private javax.swing.JButton NICS0_dialog_saveButton;
    private javax.swing.JButton NICS0_dialog_saveReturnButton;
    private javax.swing.JTextField NICS0_dialog_textField;
    private javax.swing.JFrame NICS1_dialog;
    private javax.swing.JComboBox<String> NICS1_dialog_ChoosePlane;
    private javax.swing.JButton NICS1_dialog_cancelButton;
    private javax.swing.JButton NICS1_dialog_clearButton;
    private javax.swing.JButton NICS1_dialog_saveButton;
    private javax.swing.JButton NICS1_dialog_saveReturnButton;
    private javax.swing.JTextField NICS1_dialog_textField;
    private javax.swing.JFrame NICSO_dialog;
    private javax.swing.ButtonGroup NICS_Grid_AtomSelection_buttonGroup;
    private javax.swing.JRadioButton NICS_Grid_ByDelta_RadioButton;
    private javax.swing.JRadioButton NICS_Grid_ByPoints_RadioButton;
    private javax.swing.JRadioButton NICS_Grid_By_Atom_Specified_Plane_Radio;
    private javax.swing.JRadioButton NICS_Grid_By_Global_Coordinate_Plane_Radio;
    private javax.swing.JTextField NICS_Grid_Delta_label;
    private javax.swing.JTextField NICS_Grid_Delta_label1;
    private javax.swing.JTextField NICS_Grid_Delta_label2;
    private javax.swing.JTextField NICS_Grid_MaxRange_label;
    private javax.swing.JTextField NICS_Grid_MaxRange_label1;
    private javax.swing.JTextField NICS_Grid_MaxRange_label2;
    private javax.swing.JTextField NICS_Grid_MinRange_label;
    private javax.swing.JTextField NICS_Grid_MinRange_label1;
    private javax.swing.JTextField NICS_Grid_MinRange_label2;
    private javax.swing.JTextField NICS_Grid_Phi_textField;
    private javax.swing.JTextField NICS_Grid_Points_label;
    private javax.swing.JTextField NICS_Grid_Points_label1;
    private javax.swing.JTextField NICS_Grid_Points_label2;
    private javax.swing.JButton NICS_Grid_Quit_Button;
    private javax.swing.JTextField NICS_Grid_Theta_textField;
    private javax.swing.JTextField NICS_Grid_XDelta_textField;
    private javax.swing.JTextField NICS_Grid_XExternal_Text;
    private javax.swing.JTextField NICS_Grid_XMaxRange_textField;
    private javax.swing.JTextField NICS_Grid_XMinRange_textField;
    private javax.swing.JTextField NICS_Grid_XNumberPoints_textField;
    private javax.swing.JTextField NICS_Grid_YDelta_textField;
    private javax.swing.JTextField NICS_Grid_YExternal_Text;
    private javax.swing.JTextField NICS_Grid_YMaxRange_textField;
    private javax.swing.JTextField NICS_Grid_YMinRange_textField;
    private javax.swing.JTextField NICS_Grid_YNumberPoints_textField;
    private javax.swing.JTextField NICS_Grid_ZDelta_textField;
    private javax.swing.JTextField NICS_Grid_ZExternal_Text;
    private javax.swing.JTextField NICS_Grid_ZMaxRange_textField;
    private javax.swing.JTextField NICS_Grid_ZMinRange_textField;
    private javax.swing.JTextField NICS_Grid_ZNumberPoints_textField;
    private javax.swing.ButtonGroup NICS_Grid_buttonGroup;
    private javax.swing.JFrame NICS_Grid_dialog;
    private javax.swing.JButton NICS_Grid_dialog_clearAtomButton;
    private javax.swing.JButton NICS_Grid_dialog_clearParameterButton;
    private javax.swing.JButton NICS_Grid_dialog_saveButton;
    private javax.swing.JButton NICS_Grid_dialog_saveReturnButton;
    private javax.swing.JTextField NICS_Grid_dialog_textField;
    private javax.swing.ButtonGroup NICS_Scan_AtomSelection_buttonGroup;
    private javax.swing.JRadioButton NICS_Scan_ByDelta_jRadioButton;
    private javax.swing.JRadioButton NICS_Scan_ByPoints_RadioButton;
    private javax.swing.JRadioButton NICS_Scan_By_Atom_Specified_Plane_Radio;
    private javax.swing.JRadioButton NICS_Scan_By_Global_Coordinate_Plane_Radio;
    private javax.swing.JTextField NICS_Scan_Delta_textField;
    private javax.swing.JTextField NICS_Scan_MaxRange_textField;
    private javax.swing.JTextField NICS_Scan_MinRange_textField;
    private javax.swing.JTextField NICS_Scan_NumberPoints_textField;
    private javax.swing.JTextField NICS_Scan_Phi_textField;
    private javax.swing.JButton NICS_Scan_Quit_Button;
    private javax.swing.JTextField NICS_Scan_Theta_textField;
    private javax.swing.JTextField NICS_Scan_XExternal_Text;
    private javax.swing.JTextField NICS_Scan_YExternal_Text;
    private javax.swing.JTextField NICS_Scan_ZExternal_Text;
    private javax.swing.ButtonGroup NICS_Scan_buttonGroup;
    private javax.swing.JFrame NICS_Scan_dialog;
    private javax.swing.JButton NICS_Scan_dialog_clearAtomButton;
    private javax.swing.JButton NICS_Scan_dialog_clearParameterButton;
    private javax.swing.JButton NICS_Scan_dialog_saveButton;
    private javax.swing.JButton NICS_Scan_dialog_saveReturnButton;
    private javax.swing.JTextField NICS_Scan_dialog_textField;
    private javax.swing.JMenuItem NewGhostAtom;
    private javax.swing.JPanel PhiContainer;
    private javax.swing.JPanel PlaneDefinitionContainer;
    private javax.swing.JPanel PlaneDefinitionContainer_Scan;
    private javax.swing.JPanel PolarAngleContainer;
    private javax.swing.JPanel PolarAngleContainer_Scan;
    private javax.swing.JMenuItem SaveGhostAtom;
    private javax.swing.JPanel ThetaContainer;
    private javax.swing.JPanel XParameters;
    private javax.swing.JPanel XYZContainer;
    private javax.swing.JPanel YParameters;
    private javax.swing.JPanel ZParameters;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler15;
    private javax.swing.Box.Filler filler16;
    private javax.swing.Box.Filler filler17;
    private javax.swing.Box.Filler filler18;
    private javax.swing.Box.Filler filler19;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler20;
    private javax.swing.Box.Filler filler21;
    private javax.swing.Box.Filler filler22;
    private javax.swing.Box.Filler filler23;
    private javax.swing.Box.Filler filler24;
    private javax.swing.Box.Filler filler25;
    private javax.swing.Box.Filler filler26;
    private javax.swing.Box.Filler filler27;
    private javax.swing.Box.Filler filler28;
    private javax.swing.Box.Filler filler29;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler30;
    private javax.swing.Box.Filler filler31;
    private javax.swing.Box.Filler filler32;
    private javax.swing.Box.Filler filler33;
    private javax.swing.Box.Filler filler34;
    private javax.swing.Box.Filler filler35;
    private javax.swing.Box.Filler filler36;
    private javax.swing.Box.Filler filler37;
    private javax.swing.Box.Filler filler38;
    private javax.swing.Box.Filler filler39;
    private javax.swing.Box.Filler filler40;
    private javax.swing.Box.Filler filler41;
    private javax.swing.Box.Filler filler42;
    private javax.swing.Box.Filler filler43;
    private javax.swing.Box.Filler filler44;
    private javax.swing.Box.Filler filler45;
    private javax.swing.Box.Filler filler46;
    private javax.swing.Box.Filler filler47;
    private javax.swing.Box.Filler filler48;
    private javax.swing.Box.Filler filler49;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler50;
    private javax.swing.Box.Filler filler51;
    private javax.swing.Box.Filler filler52;
    private javax.swing.Box.Filler filler53;
    private javax.swing.Box.Filler filler54;
    private javax.swing.Box.Filler filler55;
    private javax.swing.Box.Filler filler56;
    private javax.swing.Box.Filler filler57;
    private javax.swing.Box.Filler filler58;
    private javax.swing.Box.Filler filler59;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler60;
    private javax.swing.Box.Filler filler61;
    private javax.swing.Box.Filler filler62;
    private javax.swing.Box.Filler filler63;
    private javax.swing.Box.Filler filler64;
    private javax.swing.Box.Filler filler65;
    private javax.swing.Box.Filler filler66;
    private javax.swing.Box.Filler filler67;
    private javax.swing.Box.Filler filler68;
    private javax.swing.Box.Filler filler69;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler70;
    private javax.swing.Box.Filler filler71;
    private javax.swing.Box.Filler filler72;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaCompletedCalculation;
    // End of variables declaration//GEN-END:variables
}
